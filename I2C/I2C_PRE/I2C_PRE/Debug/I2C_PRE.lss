
I2C_PRE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00000966  000009fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000966  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800172  00800172  00000a6c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a8e  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003a7  00000000  00000000  00001616  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000343  00000000  00000000  000019bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00001d00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000326  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000071c  00000000  00000000  000021f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00002912  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 37       	cpi	r26, 0x72	; 114
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e7       	ldi	r26, 0x72	; 114
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 37       	cpi	r26, 0x78	; 120
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 08 01 	call	0x210	; 0x210 <main>
  9e:	0c 94 b1 04 	jmp	0x962	; 0x962 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Init>:

void I2C_Init()
// at 16 MHz, the SCL frequency will be 16/(16+2(TWBR)), assuming prescalar of 0.
// so for 100KHz SCL, TWBR = ((F_CPU/F_SCL)-16)/2 = ((16/0.1)-16)/2 = 144/2 = 72.
{
	TWSR = 0; // set prescalar to zero
  a6:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = ((F_CPU/F_SCL)-16)/2; // set SCL frequency in TWI bit register
  aa:	88 e4       	ldi	r24, 0x48	; 72
  ac:	80 93 b8 00 	sts	0x00B8, r24
  b0:	08 95       	ret

000000b2 <I2C_Detect>:
}
byte I2C_Detect(byte addr)
// look for device at specified address; return 1=found, 0=not found
{
	TWCR = TW_START; // send start condition
  b2:	94 ea       	ldi	r25, 0xA4	; 164
  b4:	90 93 bc 00 	sts	0x00BC, r25
	while (!TW_READY); // wait
  b8:	ec eb       	ldi	r30, 0xBC	; 188
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	90 81       	ld	r25, Z
  be:	99 23       	and	r25, r25
  c0:	ec f7       	brge	.-6      	; 0xbc <I2C_Detect+0xa>
	TWDR = addr; // load device's bus address
  c2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = TW_SEND; // and send it
  c6:	84 e8       	ldi	r24, 0x84	; 132
  c8:	80 93 bc 00 	sts	0x00BC, r24
	while (!TW_READY); // wait
  cc:	ec eb       	ldi	r30, 0xBC	; 188
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 23       	and	r24, r24
  d4:	ec f7       	brge	.-6      	; 0xd0 <I2C_Detect+0x1e>
	return (TW_STATUS==0x18); // return 1 if found; 0 otherwise
  d6:	90 91 b9 00 	lds	r25, 0x00B9
  da:	98 7f       	andi	r25, 0xF8	; 248
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	98 31       	cpi	r25, 0x18	; 24
  e0:	09 f0       	breq	.+2      	; 0xe4 <I2C_Detect+0x32>
  e2:	80 e0       	ldi	r24, 0x00	; 0
}
  e4:	08 95       	ret

000000e6 <I2C_Write>:
{
	I2C_Detect(slaveAddr);
}
byte I2C_Write (byte data) // sends a data byte to slave
{
	TWDR = data; // load data to be sent
  e6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = TW_SEND; // and send it
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	80 93 bc 00 	sts	0x00BC, r24
	while (!TW_READY); // wait
  f0:	ec eb       	ldi	r30, 0xBC	; 188
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	88 23       	and	r24, r24
  f8:	ec f7       	brge	.-6      	; 0xf4 <I2C_Write+0xe>
	return (TW_STATUS!=0x28);
  fa:	90 91 b9 00 	lds	r25, 0x00B9
  fe:	98 7f       	andi	r25, 0xF8	; 248
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	98 32       	cpi	r25, 0x28	; 40
 104:	09 f4       	brne	.+2      	; 0x108 <I2C_Write+0x22>
 106:	80 e0       	ldi	r24, 0x00	; 0
}
 108:	08 95       	ret

0000010a <I2C_ReadNACK>:
	return TWDR;
	//return (TW_STATUS!=0x28);
}
byte I2C_ReadNACK () // reads a data byte from slave
{
	TWCR = TW_NACK; // nack = not reading more data
 10a:	84 e8       	ldi	r24, 0x84	; 132
 10c:	80 93 bc 00 	sts	0x00BC, r24
	while (!TW_READY); // wait
 110:	ec eb       	ldi	r30, 0xBC	; 188
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	88 23       	and	r24, r24
 118:	ec f7       	brge	.-6      	; 0x114 <I2C_ReadNACK+0xa>
	return TWDR;
 11a:	80 91 bb 00 	lds	r24, 0x00BB
	//return (TW_STATUS!=0x28);
}
 11e:	08 95       	ret

00000120 <I2C_ReadRegister>:
	I2C_Write(deviceRegister); // first byte = device register address
	I2C_Write(data); // second byte = data for device register
	I2C_Stop();
}
byte I2C_ReadRegister(byte busAddr, byte deviceRegister)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	c8 2f       	mov	r28, r24
 126:	d6 2f       	mov	r29, r22
	}
	return 0; // none detected, so return 0.
}
void I2C_Start (byte slaveAddr)
{
	I2C_Detect(slaveAddr);
 128:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_Detect>
}
byte I2C_ReadRegister(byte busAddr, byte deviceRegister)
{
	byte data = 0;
	I2C_Start(busAddr); // send device address
	I2C_Write(deviceRegister); // set register pointer
 12c:	8d 2f       	mov	r24, r29
 12e:	0e 94 73 00 	call	0xe6	; 0xe6 <I2C_Write>
	}
	return 0; // none detected, so return 0.
}
void I2C_Start (byte slaveAddr)
{
	I2C_Detect(slaveAddr);
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	8c 0f       	add	r24, r28
 136:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_Detect>
{
	byte data = 0;
	I2C_Start(busAddr); // send device address
	I2C_Write(deviceRegister); // set register pointer
	I2C_Start(busAddr+READ); // restart as a read operation
	data = I2C_ReadNACK(); // read the register data
 13a:	0e 94 85 00 	call	0x10a	; 0x10a <I2C_ReadNACK>
	I2C_Stop(); // stop
 13e:	94 e9       	ldi	r25, 0x94	; 148
 140:	90 93 bc 00 	sts	0x00BC, r25
	return data;
}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <DS3231_GetTime>:



void DS3231_GetTime(byte *hours, byte *minutes, byte *seconds)
// returns hours, minutes, and seconds in BCD format
{
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ec 01       	movw	r28, r24
 158:	7b 01       	movw	r14, r22
 15a:	8a 01       	movw	r16, r20
	*hours = I2C_ReadRegister(DS3231,HOURS_REGISTER);
 15c:	62 e0       	ldi	r22, 0x02	; 2
 15e:	88 e6       	ldi	r24, 0x68	; 104
 160:	0e 94 90 00 	call	0x120	; 0x120 <I2C_ReadRegister>
 164:	88 83       	st	Y, r24
	*minutes = I2C_ReadRegister(DS3231,MINUTES_REGISTER);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	88 e6       	ldi	r24, 0x68	; 104
 16a:	0e 94 90 00 	call	0x120	; 0x120 <I2C_ReadRegister>
 16e:	f7 01       	movw	r30, r14
 170:	80 83       	st	Z, r24
	*seconds = I2C_ReadRegister(DS3231,SECONDS_REGISTER);
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	88 e6       	ldi	r24, 0x68	; 104
 176:	0e 94 90 00 	call	0x120	; 0x120 <I2C_ReadRegister>
 17a:	f8 01       	movw	r30, r16
 17c:	80 83       	st	Z, r24
	if (*hours & 0x40) // 12hr mode:
 17e:	88 81       	ld	r24, Y
 180:	86 ff       	sbrs	r24, 6
 182:	03 c0       	rjmp	.+6      	; 0x18a <DS3231_GetTime+0x40>
	*hours &= 0x1F; // use bottom 5 bits (pm bit = temp & 0x20)
 184:	8f 71       	andi	r24, 0x1F	; 31
 186:	88 83       	st	Y, r24
 188:	02 c0       	rjmp	.+4      	; 0x18e <DS3231_GetTime+0x44>
	else *hours &= 0x3F; // 24hr mode: use bottom 6 bits
 18a:	8f 73       	andi	r24, 0x3F	; 63
 18c:	88 83       	st	Y, r24
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	ff 90       	pop	r15
 198:	ef 90       	pop	r14
 19a:	08 95       	ret

0000019c <DS3231_GetDate>:
void DS3231_GetDate(byte *months, byte *days, byte *years)
// returns months, days, and years in BCD format
{
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	7c 01       	movw	r14, r24
 1aa:	8b 01       	movw	r16, r22
 1ac:	ea 01       	movw	r28, r20
	*months = I2C_ReadRegister(DS3231,MONTHS_REGISTER);
 1ae:	65 e0       	ldi	r22, 0x05	; 5
 1b0:	88 e6       	ldi	r24, 0x68	; 104
 1b2:	0e 94 90 00 	call	0x120	; 0x120 <I2C_ReadRegister>
 1b6:	f7 01       	movw	r30, r14
 1b8:	80 83       	st	Z, r24
	*days = I2C_ReadRegister(DS3231,DAYS_REGISTER);
 1ba:	64 e0       	ldi	r22, 0x04	; 4
 1bc:	88 e6       	ldi	r24, 0x68	; 104
 1be:	0e 94 90 00 	call	0x120	; 0x120 <I2C_ReadRegister>
 1c2:	f8 01       	movw	r30, r16
 1c4:	80 83       	st	Z, r24
	*years = I2C_ReadRegister(DS3231,YEARS_REGISTER);
 1c6:	66 e0       	ldi	r22, 0x06	; 6
 1c8:	88 e6       	ldi	r24, 0x68	; 104
 1ca:	0e 94 90 00 	call	0x120	; 0x120 <I2C_ReadRegister>
 1ce:	88 83       	st	Y, r24
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	ff 90       	pop	r15
 1da:	ef 90       	pop	r14
 1dc:	08 95       	ret

000001de <DS3231_GetTemp>:
	I2C_WriteRegister(DS3231,MINUTES_REGISTER, 0x51);
	I2C_WriteRegister(DS3231,SECONDS_REGISTER, 0x00);
}
uint16_t DS3231_GetTemp()
// returns temp
{
 1de:	cf 93       	push	r28
	uint8_t high_temp, low_temp;
	uint16_t temperature = 0;
	high_temp = I2C_ReadRegister(DS3231,MSB_TEMP);
 1e0:	61 e1       	ldi	r22, 0x11	; 17
 1e2:	88 e6       	ldi	r24, 0x68	; 104
 1e4:	0e 94 90 00 	call	0x120	; 0x120 <I2C_ReadRegister>
 1e8:	c8 2f       	mov	r28, r24
	low_temp = I2C_ReadRegister(DS3231,LSB_TEMP);
 1ea:	62 e1       	ldi	r22, 0x12	; 18
 1ec:	88 e6       	ldi	r24, 0x68	; 104
 1ee:	0e 94 90 00 	call	0x120	; 0x120 <I2C_ReadRegister>
	temperature |= (high_temp<<2) | (low_temp>>6);
 1f2:	48 2f       	mov	r20, r24
 1f4:	42 95       	swap	r20
 1f6:	46 95       	lsr	r20
 1f8:	46 95       	lsr	r20
 1fa:	43 70       	andi	r20, 0x03	; 3
 1fc:	2c 2f       	mov	r18, r28
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	c9 01       	movw	r24, r18
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
	return temperature;
 20a:	84 2b       	or	r24, r20
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <main>:
uint16_t DS3231_GetTemp();



int main(void)
{
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	00 d0       	rcall	.+0      	; 0x216 <main+0x6>
 216:	00 d0       	rcall	.+0      	; 0x218 <main+0x8>
 218:	00 d0       	rcall	.+0      	; 0x21a <main+0xa>
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
	USART_Init(MYUBRR);
 21e:	87 e6       	ldi	r24, 0x67	; 103
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 8d 01 	call	0x31a	; 0x31a <USART_Init>
	stdout = &uart_output;
 226:	8e e0       	ldi	r24, 0x0E	; 14
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	90 93 75 01 	sts	0x0175, r25
 22e:	80 93 74 01 	sts	0x0174, r24
	stdin  = &uart_input;
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	90 93 73 01 	sts	0x0173, r25
 23a:	80 93 72 01 	sts	0x0172, r24

	DDRC &= _BV(4) & _BV(5);//sets SDA and SCL as inputs
 23e:	87 b1       	in	r24, 0x07	; 7
 240:	17 b8       	out	0x07, r1	; 7
	
	uint8_t hours, minutes, seconds, months, days, years, temp;
	I2C_Init();
 242:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Init>
	if(I2C_Detect(DS3231));//checks to see if the RTC is there
 246:	88 e6       	ldi	r24, 0x68	; 104
 248:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_Detect>
 24c:	81 11       	cpse	r24, r1
 24e:	0d c0       	rjmp	.+26     	; 0x26a <main+0x5a>
	else if(!I2C_Detect(DS3231)) printf("device not found!");//if it's not it spits an error
 250:	88 e6       	ldi	r24, 0x68	; 104
 252:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_Detect>
 256:	81 11       	cpse	r24, r1
 258:	08 c0       	rjmp	.+16     	; 0x26a <main+0x5a>
 25a:	8c e1       	ldi	r24, 0x1C	; 28
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	9f 93       	push	r25
 260:	8f 93       	push	r24
 262:	0e 94 ee 01 	call	0x3dc	; 0x3dc <printf>
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
	
    while(1)
    {
		getchar();
 26a:	0f 2e       	mov	r0, r31
 26c:	f2 e7       	ldi	r31, 0x72	; 114
 26e:	af 2e       	mov	r10, r31
 270:	f1 e0       	ldi	r31, 0x01	; 1
 272:	bf 2e       	mov	r11, r31
 274:	f0 2d       	mov	r31, r0
		DS3231_GetTime(&hours, &minutes,&seconds);
		DS3231_GetDate(&months, &days, &years);
		temp = DS3231_GetTemp();
        printf("the time is %d:%d:%d\n", hours, minutes, seconds);
 276:	0f 2e       	mov	r0, r31
 278:	fe e2       	ldi	r31, 0x2E	; 46
 27a:	cf 2e       	mov	r12, r31
 27c:	f1 e0       	ldi	r31, 0x01	; 1
 27e:	df 2e       	mov	r13, r31
 280:	f0 2d       	mov	r31, r0
		printf("the date is %d:%d:%d\n", months, days, years);
 282:	0f 2e       	mov	r0, r31
 284:	f4 e4       	ldi	r31, 0x44	; 68
 286:	ef 2e       	mov	r14, r31
 288:	f1 e0       	ldi	r31, 0x01	; 1
 28a:	ff 2e       	mov	r15, r31
 28c:	f0 2d       	mov	r31, r0
		printf("the temperature is %d\n", temp);
 28e:	0a e5       	ldi	r16, 0x5A	; 90
 290:	11 e0       	ldi	r17, 0x01	; 1
	if(I2C_Detect(DS3231));//checks to see if the RTC is there
	else if(!I2C_Detect(DS3231)) printf("device not found!");//if it's not it spits an error
	
    while(1)
    {
		getchar();
 292:	f5 01       	movw	r30, r10
 294:	80 81       	ld	r24, Z
 296:	91 81       	ldd	r25, Z+1	; 0x01
 298:	0e 94 b0 01 	call	0x360	; 0x360 <fgetc>
		DS3231_GetTime(&hours, &minutes,&seconds);
 29c:	ae 01       	movw	r20, r28
 29e:	4d 5f       	subi	r20, 0xFD	; 253
 2a0:	5f 4f       	sbci	r21, 0xFF	; 255
 2a2:	be 01       	movw	r22, r28
 2a4:	6e 5f       	subi	r22, 0xFE	; 254
 2a6:	7f 4f       	sbci	r23, 0xFF	; 255
 2a8:	ce 01       	movw	r24, r28
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	0e 94 a5 00 	call	0x14a	; 0x14a <DS3231_GetTime>
		DS3231_GetDate(&months, &days, &years);
 2b0:	ae 01       	movw	r20, r28
 2b2:	4a 5f       	subi	r20, 0xFA	; 250
 2b4:	5f 4f       	sbci	r21, 0xFF	; 255
 2b6:	be 01       	movw	r22, r28
 2b8:	6b 5f       	subi	r22, 0xFB	; 251
 2ba:	7f 4f       	sbci	r23, 0xFF	; 255
 2bc:	ce 01       	movw	r24, r28
 2be:	04 96       	adiw	r24, 0x04	; 4
 2c0:	0e 94 ce 00 	call	0x19c	; 0x19c <DS3231_GetDate>
		temp = DS3231_GetTemp();
 2c4:	0e 94 ef 00 	call	0x1de	; 0x1de <DS3231_GetTemp>
 2c8:	4c 01       	movw	r8, r24
        printf("the time is %d:%d:%d\n", hours, minutes, seconds);
 2ca:	8b 81       	ldd	r24, Y+3	; 0x03
 2cc:	1f 92       	push	r1
 2ce:	8f 93       	push	r24
 2d0:	8a 81       	ldd	r24, Y+2	; 0x02
 2d2:	1f 92       	push	r1
 2d4:	8f 93       	push	r24
 2d6:	89 81       	ldd	r24, Y+1	; 0x01
 2d8:	1f 92       	push	r1
 2da:	8f 93       	push	r24
 2dc:	df 92       	push	r13
 2de:	cf 92       	push	r12
 2e0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <printf>
		printf("the date is %d:%d:%d\n", months, days, years);
 2e4:	8e 81       	ldd	r24, Y+6	; 0x06
 2e6:	1f 92       	push	r1
 2e8:	8f 93       	push	r24
 2ea:	8d 81       	ldd	r24, Y+5	; 0x05
 2ec:	1f 92       	push	r1
 2ee:	8f 93       	push	r24
 2f0:	8c 81       	ldd	r24, Y+4	; 0x04
 2f2:	1f 92       	push	r1
 2f4:	8f 93       	push	r24
 2f6:	ff 92       	push	r15
 2f8:	ef 92       	push	r14
 2fa:	0e 94 ee 01 	call	0x3dc	; 0x3dc <printf>
 2fe:	c4 01       	movw	r24, r8
 300:	99 27       	eor	r25, r25
		printf("the temperature is %d\n", temp);
 302:	9f 93       	push	r25
 304:	8f 93       	push	r24
 306:	1f 93       	push	r17
 308:	0f 93       	push	r16
 30a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <printf>
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	f8 94       	cli
 312:	de bf       	out	0x3e, r29	; 62
 314:	0f be       	out	0x3f, r0	; 63
 316:	cd bf       	out	0x3d, r28	; 61
 318:	bc cf       	rjmp	.-136    	; 0x292 <main+0x82>

0000031a <USART_Init>:
#include <avr/io.h>
#include <stdio.h>

void USART_Init(unsigned int ubrr) {
	/* set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 31a:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 31e:	80 93 c4 00 	sts	0x00C4, r24

    UCSR0C = _BV(USBS0) | _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data, 2 stop bits */ 
 322:	8e e0       	ldi	r24, 0x0E	; 14
 324:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */    
 328:	88 e1       	ldi	r24, 0x18	; 24
 32a:	80 93 c1 00 	sts	0x00C1, r24
 32e:	08 95       	ret

00000330 <USART_Transmit>:
}

void USART_Transmit(char c, FILE *stream) {
 330:	cf 93       	push	r28
 332:	c8 2f       	mov	r28, r24
    if (c == '\n') {
 334:	8a 30       	cpi	r24, 0x0A	; 10
 336:	19 f4       	brne	.+6      	; 0x33e <USART_Transmit+0xe>
        USART_Transmit('\r', stream); /* transmit carriage return with new line */
 338:	8d e0       	ldi	r24, 0x0D	; 13
 33a:	0e 94 98 01 	call	0x330	; 0x330 <USART_Transmit>
    }
    /* Wait for empty transmit buffer */
    while ( !( UCSR0A & (1<<UDRE0)) )
 33e:	e0 ec       	ldi	r30, 0xC0	; 192
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	90 81       	ld	r25, Z
 344:	95 ff       	sbrs	r25, 5
 346:	fd cf       	rjmp	.-6      	; 0x342 <USART_Transmit+0x12>
    ;
    /* Put data into buffer, sends the data */
    UDR0 = c;
 348:	c0 93 c6 00 	sts	0x00C6, r28
}
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <USART_Receive>:

char USART_Receive(FILE *stream) {
    /* Wait for data to be received */
    while ( !(UCSR0A & (1<<RXC0)) )
 350:	e0 ec       	ldi	r30, 0xC0	; 192
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	88 23       	and	r24, r24
 358:	ec f7       	brge	.-6      	; 0x354 <USART_Receive+0x4>
    ;
    /* Get and return received data from buffer */
    return UDR0;
 35a:	80 91 c6 00 	lds	r24, 0x00C6
}
 35e:	08 95       	ret

00000360 <fgetc>:
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	ec 01       	movw	r28, r24
 366:	2b 81       	ldd	r18, Y+3	; 0x03
 368:	20 ff       	sbrs	r18, 0
 36a:	33 c0       	rjmp	.+102    	; 0x3d2 <fgetc+0x72>
 36c:	26 ff       	sbrs	r18, 6
 36e:	0a c0       	rjmp	.+20     	; 0x384 <fgetc+0x24>
 370:	2f 7b       	andi	r18, 0xBF	; 191
 372:	2b 83       	std	Y+3, r18	; 0x03
 374:	8e 81       	ldd	r24, Y+6	; 0x06
 376:	9f 81       	ldd	r25, Y+7	; 0x07
 378:	01 96       	adiw	r24, 0x01	; 1
 37a:	9f 83       	std	Y+7, r25	; 0x07
 37c:	8e 83       	std	Y+6, r24	; 0x06
 37e:	8a 81       	ldd	r24, Y+2	; 0x02
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	29 c0       	rjmp	.+82     	; 0x3d6 <fgetc+0x76>
 384:	22 ff       	sbrs	r18, 2
 386:	0f c0       	rjmp	.+30     	; 0x3a6 <fgetc+0x46>
 388:	e8 81       	ld	r30, Y
 38a:	f9 81       	ldd	r31, Y+1	; 0x01
 38c:	80 81       	ld	r24, Z
 38e:	99 27       	eor	r25, r25
 390:	87 fd       	sbrc	r24, 7
 392:	90 95       	com	r25
 394:	00 97       	sbiw	r24, 0x00	; 0
 396:	19 f4       	brne	.+6      	; 0x39e <fgetc+0x3e>
 398:	20 62       	ori	r18, 0x20	; 32
 39a:	2b 83       	std	Y+3, r18	; 0x03
 39c:	1a c0       	rjmp	.+52     	; 0x3d2 <fgetc+0x72>
 39e:	31 96       	adiw	r30, 0x01	; 1
 3a0:	f9 83       	std	Y+1, r31	; 0x01
 3a2:	e8 83       	st	Y, r30
 3a4:	0e c0       	rjmp	.+28     	; 0x3c2 <fgetc+0x62>
 3a6:	ea 85       	ldd	r30, Y+10	; 0x0a
 3a8:	fb 85       	ldd	r31, Y+11	; 0x0b
 3aa:	09 95       	icall
 3ac:	97 ff       	sbrs	r25, 7
 3ae:	09 c0       	rjmp	.+18     	; 0x3c2 <fgetc+0x62>
 3b0:	2b 81       	ldd	r18, Y+3	; 0x03
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	11 f4       	brne	.+4      	; 0x3ba <fgetc+0x5a>
 3b6:	80 e1       	ldi	r24, 0x10	; 16
 3b8:	01 c0       	rjmp	.+2      	; 0x3bc <fgetc+0x5c>
 3ba:	80 e2       	ldi	r24, 0x20	; 32
 3bc:	82 2b       	or	r24, r18
 3be:	8b 83       	std	Y+3, r24	; 0x03
 3c0:	08 c0       	rjmp	.+16     	; 0x3d2 <fgetc+0x72>
 3c2:	2e 81       	ldd	r18, Y+6	; 0x06
 3c4:	3f 81       	ldd	r19, Y+7	; 0x07
 3c6:	2f 5f       	subi	r18, 0xFF	; 255
 3c8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ca:	3f 83       	std	Y+7, r19	; 0x07
 3cc:	2e 83       	std	Y+6, r18	; 0x06
 3ce:	99 27       	eor	r25, r25
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <fgetc+0x76>
 3d2:	8f ef       	ldi	r24, 0xFF	; 255
 3d4:	9f ef       	ldi	r25, 0xFF	; 255
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <printf>:
 3dc:	a0 e0       	ldi	r26, 0x00	; 0
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	e4 ef       	ldi	r30, 0xF4	; 244
 3e2:	f1 e0       	ldi	r31, 0x01	; 1
 3e4:	0c 94 8a 04 	jmp	0x914	; 0x914 <__stack+0x15>
 3e8:	fe 01       	movw	r30, r28
 3ea:	35 96       	adiw	r30, 0x05	; 5
 3ec:	61 91       	ld	r22, Z+
 3ee:	71 91       	ld	r23, Z+
 3f0:	af 01       	movw	r20, r30
 3f2:	80 91 74 01 	lds	r24, 0x0174
 3f6:	90 91 75 01 	lds	r25, 0x0175
 3fa:	0e 94 02 02 	call	0x404	; 0x404 <vfprintf>
 3fe:	e2 e0       	ldi	r30, 0x02	; 2
 400:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__epilogue_restores__+0x20>

00000404 <vfprintf>:
 404:	ac e0       	ldi	r26, 0x0C	; 12
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	e8 e0       	ldi	r30, 0x08	; 8
 40a:	f2 e0       	ldi	r31, 0x02	; 2
 40c:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__prologue_saves__>
 410:	7c 01       	movw	r14, r24
 412:	6b 01       	movw	r12, r22
 414:	8a 01       	movw	r16, r20
 416:	fc 01       	movw	r30, r24
 418:	17 82       	std	Z+7, r1	; 0x07
 41a:	16 82       	std	Z+6, r1	; 0x06
 41c:	83 81       	ldd	r24, Z+3	; 0x03
 41e:	81 ff       	sbrs	r24, 1
 420:	bd c1       	rjmp	.+890    	; 0x79c <vfprintf+0x398>
 422:	ce 01       	movw	r24, r28
 424:	01 96       	adiw	r24, 0x01	; 1
 426:	4c 01       	movw	r8, r24
 428:	f7 01       	movw	r30, r14
 42a:	93 81       	ldd	r25, Z+3	; 0x03
 42c:	f6 01       	movw	r30, r12
 42e:	93 fd       	sbrc	r25, 3
 430:	85 91       	lpm	r24, Z+
 432:	93 ff       	sbrs	r25, 3
 434:	81 91       	ld	r24, Z+
 436:	6f 01       	movw	r12, r30
 438:	88 23       	and	r24, r24
 43a:	09 f4       	brne	.+2      	; 0x43e <vfprintf+0x3a>
 43c:	ab c1       	rjmp	.+854    	; 0x794 <vfprintf+0x390>
 43e:	85 32       	cpi	r24, 0x25	; 37
 440:	39 f4       	brne	.+14     	; 0x450 <vfprintf+0x4c>
 442:	93 fd       	sbrc	r25, 3
 444:	85 91       	lpm	r24, Z+
 446:	93 ff       	sbrs	r25, 3
 448:	81 91       	ld	r24, Z+
 44a:	6f 01       	movw	r12, r30
 44c:	85 32       	cpi	r24, 0x25	; 37
 44e:	29 f4       	brne	.+10     	; 0x45a <vfprintf+0x56>
 450:	b7 01       	movw	r22, r14
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <fputc>
 458:	e7 cf       	rjmp	.-50     	; 0x428 <vfprintf+0x24>
 45a:	51 2c       	mov	r5, r1
 45c:	31 2c       	mov	r3, r1
 45e:	20 e0       	ldi	r18, 0x00	; 0
 460:	20 32       	cpi	r18, 0x20	; 32
 462:	a0 f4       	brcc	.+40     	; 0x48c <vfprintf+0x88>
 464:	8b 32       	cpi	r24, 0x2B	; 43
 466:	69 f0       	breq	.+26     	; 0x482 <vfprintf+0x7e>
 468:	30 f4       	brcc	.+12     	; 0x476 <vfprintf+0x72>
 46a:	80 32       	cpi	r24, 0x20	; 32
 46c:	59 f0       	breq	.+22     	; 0x484 <vfprintf+0x80>
 46e:	83 32       	cpi	r24, 0x23	; 35
 470:	69 f4       	brne	.+26     	; 0x48c <vfprintf+0x88>
 472:	20 61       	ori	r18, 0x10	; 16
 474:	2c c0       	rjmp	.+88     	; 0x4ce <vfprintf+0xca>
 476:	8d 32       	cpi	r24, 0x2D	; 45
 478:	39 f0       	breq	.+14     	; 0x488 <vfprintf+0x84>
 47a:	80 33       	cpi	r24, 0x30	; 48
 47c:	39 f4       	brne	.+14     	; 0x48c <vfprintf+0x88>
 47e:	21 60       	ori	r18, 0x01	; 1
 480:	26 c0       	rjmp	.+76     	; 0x4ce <vfprintf+0xca>
 482:	22 60       	ori	r18, 0x02	; 2
 484:	24 60       	ori	r18, 0x04	; 4
 486:	23 c0       	rjmp	.+70     	; 0x4ce <vfprintf+0xca>
 488:	28 60       	ori	r18, 0x08	; 8
 48a:	21 c0       	rjmp	.+66     	; 0x4ce <vfprintf+0xca>
 48c:	27 fd       	sbrc	r18, 7
 48e:	27 c0       	rjmp	.+78     	; 0x4de <vfprintf+0xda>
 490:	30 ed       	ldi	r19, 0xD0	; 208
 492:	38 0f       	add	r19, r24
 494:	3a 30       	cpi	r19, 0x0A	; 10
 496:	78 f4       	brcc	.+30     	; 0x4b6 <vfprintf+0xb2>
 498:	26 ff       	sbrs	r18, 6
 49a:	06 c0       	rjmp	.+12     	; 0x4a8 <vfprintf+0xa4>
 49c:	fa e0       	ldi	r31, 0x0A	; 10
 49e:	5f 9e       	mul	r5, r31
 4a0:	30 0d       	add	r19, r0
 4a2:	11 24       	eor	r1, r1
 4a4:	53 2e       	mov	r5, r19
 4a6:	13 c0       	rjmp	.+38     	; 0x4ce <vfprintf+0xca>
 4a8:	8a e0       	ldi	r24, 0x0A	; 10
 4aa:	38 9e       	mul	r3, r24
 4ac:	30 0d       	add	r19, r0
 4ae:	11 24       	eor	r1, r1
 4b0:	33 2e       	mov	r3, r19
 4b2:	20 62       	ori	r18, 0x20	; 32
 4b4:	0c c0       	rjmp	.+24     	; 0x4ce <vfprintf+0xca>
 4b6:	8e 32       	cpi	r24, 0x2E	; 46
 4b8:	21 f4       	brne	.+8      	; 0x4c2 <vfprintf+0xbe>
 4ba:	26 fd       	sbrc	r18, 6
 4bc:	6b c1       	rjmp	.+726    	; 0x794 <vfprintf+0x390>
 4be:	20 64       	ori	r18, 0x40	; 64
 4c0:	06 c0       	rjmp	.+12     	; 0x4ce <vfprintf+0xca>
 4c2:	8c 36       	cpi	r24, 0x6C	; 108
 4c4:	11 f4       	brne	.+4      	; 0x4ca <vfprintf+0xc6>
 4c6:	20 68       	ori	r18, 0x80	; 128
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <vfprintf+0xca>
 4ca:	88 36       	cpi	r24, 0x68	; 104
 4cc:	41 f4       	brne	.+16     	; 0x4de <vfprintf+0xda>
 4ce:	f6 01       	movw	r30, r12
 4d0:	93 fd       	sbrc	r25, 3
 4d2:	85 91       	lpm	r24, Z+
 4d4:	93 ff       	sbrs	r25, 3
 4d6:	81 91       	ld	r24, Z+
 4d8:	6f 01       	movw	r12, r30
 4da:	81 11       	cpse	r24, r1
 4dc:	c1 cf       	rjmp	.-126    	; 0x460 <vfprintf+0x5c>
 4de:	98 2f       	mov	r25, r24
 4e0:	9f 7d       	andi	r25, 0xDF	; 223
 4e2:	95 54       	subi	r25, 0x45	; 69
 4e4:	93 30       	cpi	r25, 0x03	; 3
 4e6:	28 f4       	brcc	.+10     	; 0x4f2 <vfprintf+0xee>
 4e8:	0c 5f       	subi	r16, 0xFC	; 252
 4ea:	1f 4f       	sbci	r17, 0xFF	; 255
 4ec:	ff e3       	ldi	r31, 0x3F	; 63
 4ee:	f9 83       	std	Y+1, r31	; 0x01
 4f0:	0d c0       	rjmp	.+26     	; 0x50c <vfprintf+0x108>
 4f2:	83 36       	cpi	r24, 0x63	; 99
 4f4:	31 f0       	breq	.+12     	; 0x502 <vfprintf+0xfe>
 4f6:	83 37       	cpi	r24, 0x73	; 115
 4f8:	71 f0       	breq	.+28     	; 0x516 <vfprintf+0x112>
 4fa:	83 35       	cpi	r24, 0x53	; 83
 4fc:	09 f0       	breq	.+2      	; 0x500 <vfprintf+0xfc>
 4fe:	5b c0       	rjmp	.+182    	; 0x5b6 <vfprintf+0x1b2>
 500:	22 c0       	rjmp	.+68     	; 0x546 <vfprintf+0x142>
 502:	f8 01       	movw	r30, r16
 504:	80 81       	ld	r24, Z
 506:	89 83       	std	Y+1, r24	; 0x01
 508:	0e 5f       	subi	r16, 0xFE	; 254
 50a:	1f 4f       	sbci	r17, 0xFF	; 255
 50c:	44 24       	eor	r4, r4
 50e:	43 94       	inc	r4
 510:	51 2c       	mov	r5, r1
 512:	54 01       	movw	r10, r8
 514:	15 c0       	rjmp	.+42     	; 0x540 <vfprintf+0x13c>
 516:	38 01       	movw	r6, r16
 518:	f2 e0       	ldi	r31, 0x02	; 2
 51a:	6f 0e       	add	r6, r31
 51c:	71 1c       	adc	r7, r1
 51e:	f8 01       	movw	r30, r16
 520:	a0 80       	ld	r10, Z
 522:	b1 80       	ldd	r11, Z+1	; 0x01
 524:	26 ff       	sbrs	r18, 6
 526:	03 c0       	rjmp	.+6      	; 0x52e <vfprintf+0x12a>
 528:	65 2d       	mov	r22, r5
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	02 c0       	rjmp	.+4      	; 0x532 <vfprintf+0x12e>
 52e:	6f ef       	ldi	r22, 0xFF	; 255
 530:	7f ef       	ldi	r23, 0xFF	; 255
 532:	c5 01       	movw	r24, r10
 534:	2c 87       	std	Y+12, r18	; 0x0c
 536:	0e 94 df 03 	call	0x7be	; 0x7be <strnlen>
 53a:	2c 01       	movw	r4, r24
 53c:	83 01       	movw	r16, r6
 53e:	2c 85       	ldd	r18, Y+12	; 0x0c
 540:	2f 77       	andi	r18, 0x7F	; 127
 542:	22 2e       	mov	r2, r18
 544:	17 c0       	rjmp	.+46     	; 0x574 <vfprintf+0x170>
 546:	38 01       	movw	r6, r16
 548:	f2 e0       	ldi	r31, 0x02	; 2
 54a:	6f 0e       	add	r6, r31
 54c:	71 1c       	adc	r7, r1
 54e:	f8 01       	movw	r30, r16
 550:	a0 80       	ld	r10, Z
 552:	b1 80       	ldd	r11, Z+1	; 0x01
 554:	26 ff       	sbrs	r18, 6
 556:	03 c0       	rjmp	.+6      	; 0x55e <vfprintf+0x15a>
 558:	65 2d       	mov	r22, r5
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <vfprintf+0x15e>
 55e:	6f ef       	ldi	r22, 0xFF	; 255
 560:	7f ef       	ldi	r23, 0xFF	; 255
 562:	c5 01       	movw	r24, r10
 564:	2c 87       	std	Y+12, r18	; 0x0c
 566:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <strnlen_P>
 56a:	2c 01       	movw	r4, r24
 56c:	2c 85       	ldd	r18, Y+12	; 0x0c
 56e:	20 68       	ori	r18, 0x80	; 128
 570:	22 2e       	mov	r2, r18
 572:	83 01       	movw	r16, r6
 574:	23 fc       	sbrc	r2, 3
 576:	1b c0       	rjmp	.+54     	; 0x5ae <vfprintf+0x1aa>
 578:	83 2d       	mov	r24, r3
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	48 16       	cp	r4, r24
 57e:	59 06       	cpc	r5, r25
 580:	b0 f4       	brcc	.+44     	; 0x5ae <vfprintf+0x1aa>
 582:	b7 01       	movw	r22, r14
 584:	80 e2       	ldi	r24, 0x20	; 32
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <fputc>
 58c:	3a 94       	dec	r3
 58e:	f4 cf       	rjmp	.-24     	; 0x578 <vfprintf+0x174>
 590:	f5 01       	movw	r30, r10
 592:	27 fc       	sbrc	r2, 7
 594:	85 91       	lpm	r24, Z+
 596:	27 fe       	sbrs	r2, 7
 598:	81 91       	ld	r24, Z+
 59a:	5f 01       	movw	r10, r30
 59c:	b7 01       	movw	r22, r14
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <fputc>
 5a4:	31 10       	cpse	r3, r1
 5a6:	3a 94       	dec	r3
 5a8:	f1 e0       	ldi	r31, 0x01	; 1
 5aa:	4f 1a       	sub	r4, r31
 5ac:	51 08       	sbc	r5, r1
 5ae:	41 14       	cp	r4, r1
 5b0:	51 04       	cpc	r5, r1
 5b2:	71 f7       	brne	.-36     	; 0x590 <vfprintf+0x18c>
 5b4:	e5 c0       	rjmp	.+458    	; 0x780 <vfprintf+0x37c>
 5b6:	84 36       	cpi	r24, 0x64	; 100
 5b8:	11 f0       	breq	.+4      	; 0x5be <vfprintf+0x1ba>
 5ba:	89 36       	cpi	r24, 0x69	; 105
 5bc:	39 f5       	brne	.+78     	; 0x60c <vfprintf+0x208>
 5be:	f8 01       	movw	r30, r16
 5c0:	27 ff       	sbrs	r18, 7
 5c2:	07 c0       	rjmp	.+14     	; 0x5d2 <vfprintf+0x1ce>
 5c4:	60 81       	ld	r22, Z
 5c6:	71 81       	ldd	r23, Z+1	; 0x01
 5c8:	82 81       	ldd	r24, Z+2	; 0x02
 5ca:	93 81       	ldd	r25, Z+3	; 0x03
 5cc:	0c 5f       	subi	r16, 0xFC	; 252
 5ce:	1f 4f       	sbci	r17, 0xFF	; 255
 5d0:	08 c0       	rjmp	.+16     	; 0x5e2 <vfprintf+0x1de>
 5d2:	60 81       	ld	r22, Z
 5d4:	71 81       	ldd	r23, Z+1	; 0x01
 5d6:	88 27       	eor	r24, r24
 5d8:	77 fd       	sbrc	r23, 7
 5da:	80 95       	com	r24
 5dc:	98 2f       	mov	r25, r24
 5de:	0e 5f       	subi	r16, 0xFE	; 254
 5e0:	1f 4f       	sbci	r17, 0xFF	; 255
 5e2:	2f 76       	andi	r18, 0x6F	; 111
 5e4:	b2 2e       	mov	r11, r18
 5e6:	97 ff       	sbrs	r25, 7
 5e8:	09 c0       	rjmp	.+18     	; 0x5fc <vfprintf+0x1f8>
 5ea:	90 95       	com	r25
 5ec:	80 95       	com	r24
 5ee:	70 95       	com	r23
 5f0:	61 95       	neg	r22
 5f2:	7f 4f       	sbci	r23, 0xFF	; 255
 5f4:	8f 4f       	sbci	r24, 0xFF	; 255
 5f6:	9f 4f       	sbci	r25, 0xFF	; 255
 5f8:	20 68       	ori	r18, 0x80	; 128
 5fa:	b2 2e       	mov	r11, r18
 5fc:	2a e0       	ldi	r18, 0x0A	; 10
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	a4 01       	movw	r20, r8
 602:	0e 94 1c 04 	call	0x838	; 0x838 <__ultoa_invert>
 606:	a8 2e       	mov	r10, r24
 608:	a8 18       	sub	r10, r8
 60a:	44 c0       	rjmp	.+136    	; 0x694 <vfprintf+0x290>
 60c:	85 37       	cpi	r24, 0x75	; 117
 60e:	29 f4       	brne	.+10     	; 0x61a <vfprintf+0x216>
 610:	2f 7e       	andi	r18, 0xEF	; 239
 612:	b2 2e       	mov	r11, r18
 614:	2a e0       	ldi	r18, 0x0A	; 10
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	25 c0       	rjmp	.+74     	; 0x664 <vfprintf+0x260>
 61a:	f2 2f       	mov	r31, r18
 61c:	f9 7f       	andi	r31, 0xF9	; 249
 61e:	bf 2e       	mov	r11, r31
 620:	8f 36       	cpi	r24, 0x6F	; 111
 622:	c1 f0       	breq	.+48     	; 0x654 <vfprintf+0x250>
 624:	18 f4       	brcc	.+6      	; 0x62c <vfprintf+0x228>
 626:	88 35       	cpi	r24, 0x58	; 88
 628:	79 f0       	breq	.+30     	; 0x648 <vfprintf+0x244>
 62a:	b4 c0       	rjmp	.+360    	; 0x794 <vfprintf+0x390>
 62c:	80 37       	cpi	r24, 0x70	; 112
 62e:	19 f0       	breq	.+6      	; 0x636 <vfprintf+0x232>
 630:	88 37       	cpi	r24, 0x78	; 120
 632:	21 f0       	breq	.+8      	; 0x63c <vfprintf+0x238>
 634:	af c0       	rjmp	.+350    	; 0x794 <vfprintf+0x390>
 636:	2f 2f       	mov	r18, r31
 638:	20 61       	ori	r18, 0x10	; 16
 63a:	b2 2e       	mov	r11, r18
 63c:	b4 fe       	sbrs	r11, 4
 63e:	0d c0       	rjmp	.+26     	; 0x65a <vfprintf+0x256>
 640:	8b 2d       	mov	r24, r11
 642:	84 60       	ori	r24, 0x04	; 4
 644:	b8 2e       	mov	r11, r24
 646:	09 c0       	rjmp	.+18     	; 0x65a <vfprintf+0x256>
 648:	24 ff       	sbrs	r18, 4
 64a:	0a c0       	rjmp	.+20     	; 0x660 <vfprintf+0x25c>
 64c:	9f 2f       	mov	r25, r31
 64e:	96 60       	ori	r25, 0x06	; 6
 650:	b9 2e       	mov	r11, r25
 652:	06 c0       	rjmp	.+12     	; 0x660 <vfprintf+0x25c>
 654:	28 e0       	ldi	r18, 0x08	; 8
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	05 c0       	rjmp	.+10     	; 0x664 <vfprintf+0x260>
 65a:	20 e1       	ldi	r18, 0x10	; 16
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	02 c0       	rjmp	.+4      	; 0x664 <vfprintf+0x260>
 660:	20 e1       	ldi	r18, 0x10	; 16
 662:	32 e0       	ldi	r19, 0x02	; 2
 664:	f8 01       	movw	r30, r16
 666:	b7 fe       	sbrs	r11, 7
 668:	07 c0       	rjmp	.+14     	; 0x678 <vfprintf+0x274>
 66a:	60 81       	ld	r22, Z
 66c:	71 81       	ldd	r23, Z+1	; 0x01
 66e:	82 81       	ldd	r24, Z+2	; 0x02
 670:	93 81       	ldd	r25, Z+3	; 0x03
 672:	0c 5f       	subi	r16, 0xFC	; 252
 674:	1f 4f       	sbci	r17, 0xFF	; 255
 676:	06 c0       	rjmp	.+12     	; 0x684 <vfprintf+0x280>
 678:	60 81       	ld	r22, Z
 67a:	71 81       	ldd	r23, Z+1	; 0x01
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 5f       	subi	r16, 0xFE	; 254
 682:	1f 4f       	sbci	r17, 0xFF	; 255
 684:	a4 01       	movw	r20, r8
 686:	0e 94 1c 04 	call	0x838	; 0x838 <__ultoa_invert>
 68a:	a8 2e       	mov	r10, r24
 68c:	a8 18       	sub	r10, r8
 68e:	fb 2d       	mov	r31, r11
 690:	ff 77       	andi	r31, 0x7F	; 127
 692:	bf 2e       	mov	r11, r31
 694:	b6 fe       	sbrs	r11, 6
 696:	0b c0       	rjmp	.+22     	; 0x6ae <vfprintf+0x2aa>
 698:	2b 2d       	mov	r18, r11
 69a:	2e 7f       	andi	r18, 0xFE	; 254
 69c:	a5 14       	cp	r10, r5
 69e:	50 f4       	brcc	.+20     	; 0x6b4 <vfprintf+0x2b0>
 6a0:	b4 fe       	sbrs	r11, 4
 6a2:	0a c0       	rjmp	.+20     	; 0x6b8 <vfprintf+0x2b4>
 6a4:	b2 fc       	sbrc	r11, 2
 6a6:	08 c0       	rjmp	.+16     	; 0x6b8 <vfprintf+0x2b4>
 6a8:	2b 2d       	mov	r18, r11
 6aa:	2e 7e       	andi	r18, 0xEE	; 238
 6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <vfprintf+0x2b4>
 6ae:	7a 2c       	mov	r7, r10
 6b0:	2b 2d       	mov	r18, r11
 6b2:	03 c0       	rjmp	.+6      	; 0x6ba <vfprintf+0x2b6>
 6b4:	7a 2c       	mov	r7, r10
 6b6:	01 c0       	rjmp	.+2      	; 0x6ba <vfprintf+0x2b6>
 6b8:	75 2c       	mov	r7, r5
 6ba:	24 ff       	sbrs	r18, 4
 6bc:	0d c0       	rjmp	.+26     	; 0x6d8 <vfprintf+0x2d4>
 6be:	fe 01       	movw	r30, r28
 6c0:	ea 0d       	add	r30, r10
 6c2:	f1 1d       	adc	r31, r1
 6c4:	80 81       	ld	r24, Z
 6c6:	80 33       	cpi	r24, 0x30	; 48
 6c8:	11 f4       	brne	.+4      	; 0x6ce <vfprintf+0x2ca>
 6ca:	29 7e       	andi	r18, 0xE9	; 233
 6cc:	09 c0       	rjmp	.+18     	; 0x6e0 <vfprintf+0x2dc>
 6ce:	22 ff       	sbrs	r18, 2
 6d0:	06 c0       	rjmp	.+12     	; 0x6de <vfprintf+0x2da>
 6d2:	73 94       	inc	r7
 6d4:	73 94       	inc	r7
 6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <vfprintf+0x2dc>
 6d8:	82 2f       	mov	r24, r18
 6da:	86 78       	andi	r24, 0x86	; 134
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <vfprintf+0x2dc>
 6de:	73 94       	inc	r7
 6e0:	23 fd       	sbrc	r18, 3
 6e2:	13 c0       	rjmp	.+38     	; 0x70a <vfprintf+0x306>
 6e4:	20 ff       	sbrs	r18, 0
 6e6:	06 c0       	rjmp	.+12     	; 0x6f4 <vfprintf+0x2f0>
 6e8:	5a 2c       	mov	r5, r10
 6ea:	73 14       	cp	r7, r3
 6ec:	18 f4       	brcc	.+6      	; 0x6f4 <vfprintf+0x2f0>
 6ee:	53 0c       	add	r5, r3
 6f0:	57 18       	sub	r5, r7
 6f2:	73 2c       	mov	r7, r3
 6f4:	73 14       	cp	r7, r3
 6f6:	68 f4       	brcc	.+26     	; 0x712 <vfprintf+0x30e>
 6f8:	b7 01       	movw	r22, r14
 6fa:	80 e2       	ldi	r24, 0x20	; 32
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	2c 87       	std	Y+12, r18	; 0x0c
 700:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <fputc>
 704:	73 94       	inc	r7
 706:	2c 85       	ldd	r18, Y+12	; 0x0c
 708:	f5 cf       	rjmp	.-22     	; 0x6f4 <vfprintf+0x2f0>
 70a:	73 14       	cp	r7, r3
 70c:	10 f4       	brcc	.+4      	; 0x712 <vfprintf+0x30e>
 70e:	37 18       	sub	r3, r7
 710:	01 c0       	rjmp	.+2      	; 0x714 <vfprintf+0x310>
 712:	31 2c       	mov	r3, r1
 714:	24 ff       	sbrs	r18, 4
 716:	12 c0       	rjmp	.+36     	; 0x73c <vfprintf+0x338>
 718:	b7 01       	movw	r22, r14
 71a:	80 e3       	ldi	r24, 0x30	; 48
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	2c 87       	std	Y+12, r18	; 0x0c
 720:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <fputc>
 724:	2c 85       	ldd	r18, Y+12	; 0x0c
 726:	22 ff       	sbrs	r18, 2
 728:	17 c0       	rjmp	.+46     	; 0x758 <vfprintf+0x354>
 72a:	21 ff       	sbrs	r18, 1
 72c:	03 c0       	rjmp	.+6      	; 0x734 <vfprintf+0x330>
 72e:	88 e5       	ldi	r24, 0x58	; 88
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	02 c0       	rjmp	.+4      	; 0x738 <vfprintf+0x334>
 734:	88 e7       	ldi	r24, 0x78	; 120
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	b7 01       	movw	r22, r14
 73a:	0c c0       	rjmp	.+24     	; 0x754 <vfprintf+0x350>
 73c:	82 2f       	mov	r24, r18
 73e:	86 78       	andi	r24, 0x86	; 134
 740:	59 f0       	breq	.+22     	; 0x758 <vfprintf+0x354>
 742:	21 fd       	sbrc	r18, 1
 744:	02 c0       	rjmp	.+4      	; 0x74a <vfprintf+0x346>
 746:	80 e2       	ldi	r24, 0x20	; 32
 748:	01 c0       	rjmp	.+2      	; 0x74c <vfprintf+0x348>
 74a:	8b e2       	ldi	r24, 0x2B	; 43
 74c:	27 fd       	sbrc	r18, 7
 74e:	8d e2       	ldi	r24, 0x2D	; 45
 750:	b7 01       	movw	r22, r14
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <fputc>
 758:	a5 14       	cp	r10, r5
 75a:	38 f4       	brcc	.+14     	; 0x76a <vfprintf+0x366>
 75c:	b7 01       	movw	r22, r14
 75e:	80 e3       	ldi	r24, 0x30	; 48
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <fputc>
 766:	5a 94       	dec	r5
 768:	f7 cf       	rjmp	.-18     	; 0x758 <vfprintf+0x354>
 76a:	aa 94       	dec	r10
 76c:	f4 01       	movw	r30, r8
 76e:	ea 0d       	add	r30, r10
 770:	f1 1d       	adc	r31, r1
 772:	80 81       	ld	r24, Z
 774:	b7 01       	movw	r22, r14
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <fputc>
 77c:	a1 10       	cpse	r10, r1
 77e:	f5 cf       	rjmp	.-22     	; 0x76a <vfprintf+0x366>
 780:	33 20       	and	r3, r3
 782:	09 f4       	brne	.+2      	; 0x786 <vfprintf+0x382>
 784:	51 ce       	rjmp	.-862    	; 0x428 <vfprintf+0x24>
 786:	b7 01       	movw	r22, r14
 788:	80 e2       	ldi	r24, 0x20	; 32
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <fputc>
 790:	3a 94       	dec	r3
 792:	f6 cf       	rjmp	.-20     	; 0x780 <vfprintf+0x37c>
 794:	f7 01       	movw	r30, r14
 796:	86 81       	ldd	r24, Z+6	; 0x06
 798:	97 81       	ldd	r25, Z+7	; 0x07
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <vfprintf+0x39c>
 79c:	8f ef       	ldi	r24, 0xFF	; 255
 79e:	9f ef       	ldi	r25, 0xFF	; 255
 7a0:	2c 96       	adiw	r28, 0x0c	; 12
 7a2:	e2 e1       	ldi	r30, 0x12	; 18
 7a4:	0c 94 96 04 	jmp	0x92c	; 0x92c <__epilogue_restores__>

000007a8 <strnlen_P>:
 7a8:	fc 01       	movw	r30, r24
 7aa:	05 90       	lpm	r0, Z+
 7ac:	61 50       	subi	r22, 0x01	; 1
 7ae:	70 40       	sbci	r23, 0x00	; 0
 7b0:	01 10       	cpse	r0, r1
 7b2:	d8 f7       	brcc	.-10     	; 0x7aa <strnlen_P+0x2>
 7b4:	80 95       	com	r24
 7b6:	90 95       	com	r25
 7b8:	8e 0f       	add	r24, r30
 7ba:	9f 1f       	adc	r25, r31
 7bc:	08 95       	ret

000007be <strnlen>:
 7be:	fc 01       	movw	r30, r24
 7c0:	61 50       	subi	r22, 0x01	; 1
 7c2:	70 40       	sbci	r23, 0x00	; 0
 7c4:	01 90       	ld	r0, Z+
 7c6:	01 10       	cpse	r0, r1
 7c8:	d8 f7       	brcc	.-10     	; 0x7c0 <strnlen+0x2>
 7ca:	80 95       	com	r24
 7cc:	90 95       	com	r25
 7ce:	8e 0f       	add	r24, r30
 7d0:	9f 1f       	adc	r25, r31
 7d2:	08 95       	ret

000007d4 <fputc>:
 7d4:	0f 93       	push	r16
 7d6:	1f 93       	push	r17
 7d8:	cf 93       	push	r28
 7da:	df 93       	push	r29
 7dc:	18 2f       	mov	r17, r24
 7de:	09 2f       	mov	r16, r25
 7e0:	eb 01       	movw	r28, r22
 7e2:	8b 81       	ldd	r24, Y+3	; 0x03
 7e4:	81 fd       	sbrc	r24, 1
 7e6:	03 c0       	rjmp	.+6      	; 0x7ee <fputc+0x1a>
 7e8:	8f ef       	ldi	r24, 0xFF	; 255
 7ea:	9f ef       	ldi	r25, 0xFF	; 255
 7ec:	20 c0       	rjmp	.+64     	; 0x82e <fputc+0x5a>
 7ee:	82 ff       	sbrs	r24, 2
 7f0:	10 c0       	rjmp	.+32     	; 0x812 <fputc+0x3e>
 7f2:	4e 81       	ldd	r20, Y+6	; 0x06
 7f4:	5f 81       	ldd	r21, Y+7	; 0x07
 7f6:	2c 81       	ldd	r18, Y+4	; 0x04
 7f8:	3d 81       	ldd	r19, Y+5	; 0x05
 7fa:	42 17       	cp	r20, r18
 7fc:	53 07       	cpc	r21, r19
 7fe:	7c f4       	brge	.+30     	; 0x81e <fputc+0x4a>
 800:	e8 81       	ld	r30, Y
 802:	f9 81       	ldd	r31, Y+1	; 0x01
 804:	9f 01       	movw	r18, r30
 806:	2f 5f       	subi	r18, 0xFF	; 255
 808:	3f 4f       	sbci	r19, 0xFF	; 255
 80a:	39 83       	std	Y+1, r19	; 0x01
 80c:	28 83       	st	Y, r18
 80e:	10 83       	st	Z, r17
 810:	06 c0       	rjmp	.+12     	; 0x81e <fputc+0x4a>
 812:	e8 85       	ldd	r30, Y+8	; 0x08
 814:	f9 85       	ldd	r31, Y+9	; 0x09
 816:	81 2f       	mov	r24, r17
 818:	09 95       	icall
 81a:	89 2b       	or	r24, r25
 81c:	29 f7       	brne	.-54     	; 0x7e8 <fputc+0x14>
 81e:	2e 81       	ldd	r18, Y+6	; 0x06
 820:	3f 81       	ldd	r19, Y+7	; 0x07
 822:	2f 5f       	subi	r18, 0xFF	; 255
 824:	3f 4f       	sbci	r19, 0xFF	; 255
 826:	3f 83       	std	Y+7, r19	; 0x07
 828:	2e 83       	std	Y+6, r18	; 0x06
 82a:	81 2f       	mov	r24, r17
 82c:	90 2f       	mov	r25, r16
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	1f 91       	pop	r17
 834:	0f 91       	pop	r16
 836:	08 95       	ret

00000838 <__ultoa_invert>:
 838:	fa 01       	movw	r30, r20
 83a:	aa 27       	eor	r26, r26
 83c:	28 30       	cpi	r18, 0x08	; 8
 83e:	51 f1       	breq	.+84     	; 0x894 <__ultoa_invert+0x5c>
 840:	20 31       	cpi	r18, 0x10	; 16
 842:	81 f1       	breq	.+96     	; 0x8a4 <__ultoa_invert+0x6c>
 844:	e8 94       	clt
 846:	6f 93       	push	r22
 848:	6e 7f       	andi	r22, 0xFE	; 254
 84a:	6e 5f       	subi	r22, 0xFE	; 254
 84c:	7f 4f       	sbci	r23, 0xFF	; 255
 84e:	8f 4f       	sbci	r24, 0xFF	; 255
 850:	9f 4f       	sbci	r25, 0xFF	; 255
 852:	af 4f       	sbci	r26, 0xFF	; 255
 854:	b1 e0       	ldi	r27, 0x01	; 1
 856:	3e d0       	rcall	.+124    	; 0x8d4 <__ultoa_invert+0x9c>
 858:	b4 e0       	ldi	r27, 0x04	; 4
 85a:	3c d0       	rcall	.+120    	; 0x8d4 <__ultoa_invert+0x9c>
 85c:	67 0f       	add	r22, r23
 85e:	78 1f       	adc	r23, r24
 860:	89 1f       	adc	r24, r25
 862:	9a 1f       	adc	r25, r26
 864:	a1 1d       	adc	r26, r1
 866:	68 0f       	add	r22, r24
 868:	79 1f       	adc	r23, r25
 86a:	8a 1f       	adc	r24, r26
 86c:	91 1d       	adc	r25, r1
 86e:	a1 1d       	adc	r26, r1
 870:	6a 0f       	add	r22, r26
 872:	71 1d       	adc	r23, r1
 874:	81 1d       	adc	r24, r1
 876:	91 1d       	adc	r25, r1
 878:	a1 1d       	adc	r26, r1
 87a:	20 d0       	rcall	.+64     	; 0x8bc <__ultoa_invert+0x84>
 87c:	09 f4       	brne	.+2      	; 0x880 <__ultoa_invert+0x48>
 87e:	68 94       	set
 880:	3f 91       	pop	r19
 882:	2a e0       	ldi	r18, 0x0A	; 10
 884:	26 9f       	mul	r18, r22
 886:	11 24       	eor	r1, r1
 888:	30 19       	sub	r19, r0
 88a:	30 5d       	subi	r19, 0xD0	; 208
 88c:	31 93       	st	Z+, r19
 88e:	de f6       	brtc	.-74     	; 0x846 <__ultoa_invert+0xe>
 890:	cf 01       	movw	r24, r30
 892:	08 95       	ret
 894:	46 2f       	mov	r20, r22
 896:	47 70       	andi	r20, 0x07	; 7
 898:	40 5d       	subi	r20, 0xD0	; 208
 89a:	41 93       	st	Z+, r20
 89c:	b3 e0       	ldi	r27, 0x03	; 3
 89e:	0f d0       	rcall	.+30     	; 0x8be <__ultoa_invert+0x86>
 8a0:	c9 f7       	brne	.-14     	; 0x894 <__ultoa_invert+0x5c>
 8a2:	f6 cf       	rjmp	.-20     	; 0x890 <__ultoa_invert+0x58>
 8a4:	46 2f       	mov	r20, r22
 8a6:	4f 70       	andi	r20, 0x0F	; 15
 8a8:	40 5d       	subi	r20, 0xD0	; 208
 8aa:	4a 33       	cpi	r20, 0x3A	; 58
 8ac:	18 f0       	brcs	.+6      	; 0x8b4 <__ultoa_invert+0x7c>
 8ae:	49 5d       	subi	r20, 0xD9	; 217
 8b0:	31 fd       	sbrc	r19, 1
 8b2:	40 52       	subi	r20, 0x20	; 32
 8b4:	41 93       	st	Z+, r20
 8b6:	02 d0       	rcall	.+4      	; 0x8bc <__ultoa_invert+0x84>
 8b8:	a9 f7       	brne	.-22     	; 0x8a4 <__ultoa_invert+0x6c>
 8ba:	ea cf       	rjmp	.-44     	; 0x890 <__ultoa_invert+0x58>
 8bc:	b4 e0       	ldi	r27, 0x04	; 4
 8be:	a6 95       	lsr	r26
 8c0:	97 95       	ror	r25
 8c2:	87 95       	ror	r24
 8c4:	77 95       	ror	r23
 8c6:	67 95       	ror	r22
 8c8:	ba 95       	dec	r27
 8ca:	c9 f7       	brne	.-14     	; 0x8be <__ultoa_invert+0x86>
 8cc:	00 97       	sbiw	r24, 0x00	; 0
 8ce:	61 05       	cpc	r22, r1
 8d0:	71 05       	cpc	r23, r1
 8d2:	08 95       	ret
 8d4:	9b 01       	movw	r18, r22
 8d6:	ac 01       	movw	r20, r24
 8d8:	0a 2e       	mov	r0, r26
 8da:	06 94       	lsr	r0
 8dc:	57 95       	ror	r21
 8de:	47 95       	ror	r20
 8e0:	37 95       	ror	r19
 8e2:	27 95       	ror	r18
 8e4:	ba 95       	dec	r27
 8e6:	c9 f7       	brne	.-14     	; 0x8da <__ultoa_invert+0xa2>
 8e8:	62 0f       	add	r22, r18
 8ea:	73 1f       	adc	r23, r19
 8ec:	84 1f       	adc	r24, r20
 8ee:	95 1f       	adc	r25, r21
 8f0:	a0 1d       	adc	r26, r0
 8f2:	08 95       	ret

000008f4 <__prologue_saves__>:
 8f4:	2f 92       	push	r2
 8f6:	3f 92       	push	r3
 8f8:	4f 92       	push	r4
 8fa:	5f 92       	push	r5
 8fc:	6f 92       	push	r6
 8fe:	7f 92       	push	r7
 900:	8f 92       	push	r8
 902:	9f 92       	push	r9
 904:	af 92       	push	r10
 906:	bf 92       	push	r11
 908:	cf 92       	push	r12
 90a:	df 92       	push	r13
 90c:	ef 92       	push	r14
 90e:	ff 92       	push	r15
 910:	0f 93       	push	r16
 912:	1f 93       	push	r17
 914:	cf 93       	push	r28
 916:	df 93       	push	r29
 918:	cd b7       	in	r28, 0x3d	; 61
 91a:	de b7       	in	r29, 0x3e	; 62
 91c:	ca 1b       	sub	r28, r26
 91e:	db 0b       	sbc	r29, r27
 920:	0f b6       	in	r0, 0x3f	; 63
 922:	f8 94       	cli
 924:	de bf       	out	0x3e, r29	; 62
 926:	0f be       	out	0x3f, r0	; 63
 928:	cd bf       	out	0x3d, r28	; 61
 92a:	09 94       	ijmp

0000092c <__epilogue_restores__>:
 92c:	2a 88       	ldd	r2, Y+18	; 0x12
 92e:	39 88       	ldd	r3, Y+17	; 0x11
 930:	48 88       	ldd	r4, Y+16	; 0x10
 932:	5f 84       	ldd	r5, Y+15	; 0x0f
 934:	6e 84       	ldd	r6, Y+14	; 0x0e
 936:	7d 84       	ldd	r7, Y+13	; 0x0d
 938:	8c 84       	ldd	r8, Y+12	; 0x0c
 93a:	9b 84       	ldd	r9, Y+11	; 0x0b
 93c:	aa 84       	ldd	r10, Y+10	; 0x0a
 93e:	b9 84       	ldd	r11, Y+9	; 0x09
 940:	c8 84       	ldd	r12, Y+8	; 0x08
 942:	df 80       	ldd	r13, Y+7	; 0x07
 944:	ee 80       	ldd	r14, Y+6	; 0x06
 946:	fd 80       	ldd	r15, Y+5	; 0x05
 948:	0c 81       	ldd	r16, Y+4	; 0x04
 94a:	1b 81       	ldd	r17, Y+3	; 0x03
 94c:	aa 81       	ldd	r26, Y+2	; 0x02
 94e:	b9 81       	ldd	r27, Y+1	; 0x01
 950:	ce 0f       	add	r28, r30
 952:	d1 1d       	adc	r29, r1
 954:	0f b6       	in	r0, 0x3f	; 63
 956:	f8 94       	cli
 958:	de bf       	out	0x3e, r29	; 62
 95a:	0f be       	out	0x3f, r0	; 63
 95c:	cd bf       	out	0x3d, r28	; 61
 95e:	ed 01       	movw	r28, r26
 960:	08 95       	ret

00000962 <_exit>:
 962:	f8 94       	cli

00000964 <__stop_program>:
 964:	ff cf       	rjmp	.-2      	; 0x964 <__stop_program>
