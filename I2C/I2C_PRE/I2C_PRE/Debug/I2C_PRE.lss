
I2C_PRE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00000912  000009a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000912  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800158  00800158  000009fe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000009fe  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a6f  00000000  00000000  00000b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003a7  00000000  00000000  00001589  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000332  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00001c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000326  00000000  00000000  00001e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000071c  00000000  00000000  0000215a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00002876  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 35       	cpi	r26, 0x58	; 88
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e5       	ldi	r26, 0x58	; 88
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 35       	cpi	r26, 0x5E	; 94
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  9e:	0c 94 87 04 	jmp	0x90e	; 0x90e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Init>:

void I2C_Init()
// at 16 MHz, the SCL frequency will be 16/(16+2(TWBR)), assuming prescalar of 0.
// so for 100KHz SCL, TWBR = ((F_CPU/F_SCL)-16)/2 = ((16/0.1)-16)/2 = 144/2 = 72.
{
	TWSR = 0; // set prescalar to zero
  a6:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = ((F_CPU/F_SCL)-16)/2; // set SCL frequency in TWI bit register
  aa:	88 e4       	ldi	r24, 0x48	; 72
  ac:	80 93 b8 00 	sts	0x00B8, r24
  b0:	08 95       	ret

000000b2 <I2C_Detect>:
}
byte I2C_Detect(byte addr)
// look for device at specified address; return 1=found, 0=not found
{
	TWCR = TW_START; // send start condition
  b2:	94 ea       	ldi	r25, 0xA4	; 164
  b4:	90 93 bc 00 	sts	0x00BC, r25
	while (!TW_READY); // wait
  b8:	ec eb       	ldi	r30, 0xBC	; 188
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	90 81       	ld	r25, Z
  be:	99 23       	and	r25, r25
  c0:	ec f7       	brge	.-6      	; 0xbc <I2C_Detect+0xa>
	TWDR = addr; // load device's bus address
  c2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = TW_SEND; // and send it
  c6:	84 e8       	ldi	r24, 0x84	; 132
  c8:	80 93 bc 00 	sts	0x00BC, r24
	while (!TW_READY); // wait
  cc:	ec eb       	ldi	r30, 0xBC	; 188
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 23       	and	r24, r24
  d4:	ec f7       	brge	.-6      	; 0xd0 <I2C_Detect+0x1e>
	return (TW_STATUS==0x18); // return 1 if found; 0 otherwise
  d6:	90 91 b9 00 	lds	r25, 0x00B9
  da:	98 7f       	andi	r25, 0xF8	; 248
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	98 31       	cpi	r25, 0x18	; 24
  e0:	09 f0       	breq	.+2      	; 0xe4 <I2C_Detect+0x32>
  e2:	80 e0       	ldi	r24, 0x00	; 0
}
  e4:	08 95       	ret

000000e6 <I2C_Write>:
{
	I2C_Detect(slaveAddr);
}
byte I2C_Write (byte data) // sends a data byte to slave
{
	TWDR = data; // load data to be sent
  e6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = TW_SEND; // and send it
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	80 93 bc 00 	sts	0x00BC, r24
	while (!TW_READY); // wait
  f0:	ec eb       	ldi	r30, 0xBC	; 188
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	88 23       	and	r24, r24
  f8:	ec f7       	brge	.-6      	; 0xf4 <I2C_Write+0xe>
	return (TW_STATUS!=0x28);
  fa:	90 91 b9 00 	lds	r25, 0x00B9
  fe:	98 7f       	andi	r25, 0xF8	; 248
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	98 32       	cpi	r25, 0x28	; 40
 104:	09 f4       	brne	.+2      	; 0x108 <I2C_Write+0x22>
 106:	80 e0       	ldi	r24, 0x00	; 0
}
 108:	08 95       	ret

0000010a <I2C_ReadNACK>:
	return TWDR;
	//return (TW_STATUS!=0x28);
}
byte I2C_ReadNACK () // reads a data byte from slave
{
	TWCR = TW_NACK; // nack = not reading more data
 10a:	84 e8       	ldi	r24, 0x84	; 132
 10c:	80 93 bc 00 	sts	0x00BC, r24
	while (!TW_READY); // wait
 110:	ec eb       	ldi	r30, 0xBC	; 188
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	88 23       	and	r24, r24
 118:	ec f7       	brge	.-6      	; 0x114 <I2C_ReadNACK+0xa>
	return TWDR;
 11a:	80 91 bb 00 	lds	r24, 0x00BB
	//return (TW_STATUS!=0x28);
}
 11e:	08 95       	ret

00000120 <I2C_ReadRegister>:
	I2C_Write(deviceRegister); // first byte = device register address
	I2C_Write(data); // second byte = data for device register
	I2C_Stop();
}
byte I2C_ReadRegister(byte busAddr, byte deviceRegister)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	c8 2f       	mov	r28, r24
 126:	d6 2f       	mov	r29, r22
	}
	return 0; // none detected, so return 0.
}
void I2C_Start (byte slaveAddr)
{
	I2C_Detect(slaveAddr);
 128:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_Detect>
}
byte I2C_ReadRegister(byte busAddr, byte deviceRegister)
{
	byte data = 0;
	I2C_Start(busAddr); // send device address
	I2C_Write(deviceRegister); // set register pointer
 12c:	8d 2f       	mov	r24, r29
 12e:	0e 94 73 00 	call	0xe6	; 0xe6 <I2C_Write>
	}
	return 0; // none detected, so return 0.
}
void I2C_Start (byte slaveAddr)
{
	I2C_Detect(slaveAddr);
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	8c 0f       	add	r24, r28
 136:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_Detect>
{
	byte data = 0;
	I2C_Start(busAddr); // send device address
	I2C_Write(deviceRegister); // set register pointer
	I2C_Start(busAddr+READ); // restart as a read operation
	data = I2C_ReadNACK(); // read the register data
 13a:	0e 94 85 00 	call	0x10a	; 0x10a <I2C_ReadNACK>
	I2C_Stop(); // stop
 13e:	94 e9       	ldi	r25, 0x94	; 148
 140:	90 93 bc 00 	sts	0x00BC, r25
	return data;
}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <DS3231_GetTime>:



void DS3231_GetTime(byte *hours, byte *minutes, byte *seconds)
// returns hours, minutes, and seconds in BCD format
{
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ec 01       	movw	r28, r24
 158:	7b 01       	movw	r14, r22
 15a:	8a 01       	movw	r16, r20
	*hours = I2C_ReadRegister(DS3231,HOURS_REGISTER);
 15c:	62 e0       	ldi	r22, 0x02	; 2
 15e:	88 e6       	ldi	r24, 0x68	; 104
 160:	0e 94 90 00 	call	0x120	; 0x120 <I2C_ReadRegister>
 164:	88 83       	st	Y, r24
	*minutes = I2C_ReadRegister(DS3231,MINUTES_REGISTER);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	88 e6       	ldi	r24, 0x68	; 104
 16a:	0e 94 90 00 	call	0x120	; 0x120 <I2C_ReadRegister>
 16e:	f7 01       	movw	r30, r14
 170:	80 83       	st	Z, r24
	*seconds = I2C_ReadRegister(DS3231,SECONDS_REGISTER);
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	88 e6       	ldi	r24, 0x68	; 104
 176:	0e 94 90 00 	call	0x120	; 0x120 <I2C_ReadRegister>
 17a:	f8 01       	movw	r30, r16
 17c:	80 83       	st	Z, r24
	if (*hours & 0x40) // 12hr mode:
 17e:	88 81       	ld	r24, Y
 180:	86 ff       	sbrs	r24, 6
 182:	03 c0       	rjmp	.+6      	; 0x18a <DS3231_GetTime+0x40>
	*hours &= 0x1F; // use bottom 5 bits (pm bit = temp & 0x20)
 184:	8f 71       	andi	r24, 0x1F	; 31
 186:	88 83       	st	Y, r24
 188:	02 c0       	rjmp	.+4      	; 0x18e <DS3231_GetTime+0x44>
	else *hours &= 0x3F; // 24hr mode: use bottom 6 bits
 18a:	8f 73       	andi	r24, 0x3F	; 63
 18c:	88 83       	st	Y, r24
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	ff 90       	pop	r15
 198:	ef 90       	pop	r14
 19a:	08 95       	ret

0000019c <DS3231_GetDate>:
void DS3231_GetDate(byte *months, byte *days, byte *years)
// returns months, days, and years in BCD format
{
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	7c 01       	movw	r14, r24
 1aa:	8b 01       	movw	r16, r22
 1ac:	ea 01       	movw	r28, r20
	*months = I2C_ReadRegister(DS3231,MONTHS_REGISTER);
 1ae:	65 e0       	ldi	r22, 0x05	; 5
 1b0:	88 e6       	ldi	r24, 0x68	; 104
 1b2:	0e 94 90 00 	call	0x120	; 0x120 <I2C_ReadRegister>
 1b6:	f7 01       	movw	r30, r14
 1b8:	80 83       	st	Z, r24
	*days = I2C_ReadRegister(DS3231,DAYS_REGISTER);
 1ba:	64 e0       	ldi	r22, 0x04	; 4
 1bc:	88 e6       	ldi	r24, 0x68	; 104
 1be:	0e 94 90 00 	call	0x120	; 0x120 <I2C_ReadRegister>
 1c2:	f8 01       	movw	r30, r16
 1c4:	80 83       	st	Z, r24
	*years = I2C_ReadRegister(DS3231,YEARS_REGISTER);
 1c6:	66 e0       	ldi	r22, 0x06	; 6
 1c8:	88 e6       	ldi	r24, 0x68	; 104
 1ca:	0e 94 90 00 	call	0x120	; 0x120 <I2C_ReadRegister>
 1ce:	88 83       	st	Y, r24
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	ff 90       	pop	r15
 1da:	ef 90       	pop	r14
 1dc:	08 95       	ret

000001de <main>:
uint16_t DS3231_GetTemp();



int main(void)
{
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	00 d0       	rcall	.+0      	; 0x1e4 <main+0x6>
 1e4:	00 d0       	rcall	.+0      	; 0x1e6 <main+0x8>
 1e6:	00 d0       	rcall	.+0      	; 0x1e8 <main+0xa>
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
	USART_Init(MYUBRR);
 1ec:	87 e6       	ldi	r24, 0x67	; 103
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <USART_Init>
	stdout = &uart_output;
 1f4:	8e e0       	ldi	r24, 0x0E	; 14
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	90 93 5b 01 	sts	0x015B, r25
 1fc:	80 93 5a 01 	sts	0x015A, r24
	stdin  = &uart_input;
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	90 93 59 01 	sts	0x0159, r25
 208:	80 93 58 01 	sts	0x0158, r24

	DDRC &= _BV(4) & _BV(5);//sets SDA and SCL as inputs
 20c:	87 b1       	in	r24, 0x07	; 7
 20e:	17 b8       	out	0x07, r1	; 7
	
	uint8_t hours, minutes, seconds, months, days, years;
	I2C_Init();
 210:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Init>
	if(I2C_Detect(DS3231));//checks to see if the RTC is there
 214:	88 e6       	ldi	r24, 0x68	; 104
 216:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_Detect>
 21a:	81 11       	cpse	r24, r1
 21c:	0d c0       	rjmp	.+26     	; 0x238 <main+0x5a>
	else if(!I2C_Detect(DS3231)) printf("device not found!");//if it's not it spits an error
 21e:	88 e6       	ldi	r24, 0x68	; 104
 220:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_Detect>
 224:	81 11       	cpse	r24, r1
 226:	08 c0       	rjmp	.+16     	; 0x238 <main+0x5a>
 228:	8c e1       	ldi	r24, 0x1C	; 28
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	9f 93       	push	r25
 22e:	8f 93       	push	r24
 230:	0e 94 c4 01 	call	0x388	; 0x388 <printf>
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
	
    while(1)
    {
		getchar();
 238:	0f 2e       	mov	r0, r31
 23a:	f8 e5       	ldi	r31, 0x58	; 88
 23c:	cf 2e       	mov	r12, r31
 23e:	f1 e0       	ldi	r31, 0x01	; 1
 240:	df 2e       	mov	r13, r31
 242:	f0 2d       	mov	r31, r0
		DS3231_GetTime(&hours, &minutes,&seconds);
		DS3231_GetDate(&months, &days, &years);
        printf("the time is %d:%d:%d", hours, minutes, seconds);
 244:	0f 2e       	mov	r0, r31
 246:	fe e2       	ldi	r31, 0x2E	; 46
 248:	ef 2e       	mov	r14, r31
 24a:	f1 e0       	ldi	r31, 0x01	; 1
 24c:	ff 2e       	mov	r15, r31
 24e:	f0 2d       	mov	r31, r0
		printf("the date is %d:%d:%d", months, days, years);
 250:	03 e4       	ldi	r16, 0x43	; 67
 252:	11 e0       	ldi	r17, 0x01	; 1
	if(I2C_Detect(DS3231));//checks to see if the RTC is there
	else if(!I2C_Detect(DS3231)) printf("device not found!");//if it's not it spits an error
	
    while(1)
    {
		getchar();
 254:	f6 01       	movw	r30, r12
 256:	80 81       	ld	r24, Z
 258:	91 81       	ldd	r25, Z+1	; 0x01
 25a:	0e 94 86 01 	call	0x30c	; 0x30c <fgetc>
		DS3231_GetTime(&hours, &minutes,&seconds);
 25e:	ae 01       	movw	r20, r28
 260:	4d 5f       	subi	r20, 0xFD	; 253
 262:	5f 4f       	sbci	r21, 0xFF	; 255
 264:	be 01       	movw	r22, r28
 266:	6e 5f       	subi	r22, 0xFE	; 254
 268:	7f 4f       	sbci	r23, 0xFF	; 255
 26a:	ce 01       	movw	r24, r28
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	0e 94 a5 00 	call	0x14a	; 0x14a <DS3231_GetTime>
		DS3231_GetDate(&months, &days, &years);
 272:	ae 01       	movw	r20, r28
 274:	4a 5f       	subi	r20, 0xFA	; 250
 276:	5f 4f       	sbci	r21, 0xFF	; 255
 278:	be 01       	movw	r22, r28
 27a:	6b 5f       	subi	r22, 0xFB	; 251
 27c:	7f 4f       	sbci	r23, 0xFF	; 255
 27e:	ce 01       	movw	r24, r28
 280:	04 96       	adiw	r24, 0x04	; 4
 282:	0e 94 ce 00 	call	0x19c	; 0x19c <DS3231_GetDate>
        printf("the time is %d:%d:%d", hours, minutes, seconds);
 286:	8b 81       	ldd	r24, Y+3	; 0x03
 288:	1f 92       	push	r1
 28a:	8f 93       	push	r24
 28c:	8a 81       	ldd	r24, Y+2	; 0x02
 28e:	1f 92       	push	r1
 290:	8f 93       	push	r24
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	1f 92       	push	r1
 296:	8f 93       	push	r24
 298:	ff 92       	push	r15
 29a:	ef 92       	push	r14
 29c:	0e 94 c4 01 	call	0x388	; 0x388 <printf>
		printf("the date is %d:%d:%d", months, days, years);
 2a0:	8e 81       	ldd	r24, Y+6	; 0x06
 2a2:	1f 92       	push	r1
 2a4:	8f 93       	push	r24
 2a6:	8d 81       	ldd	r24, Y+5	; 0x05
 2a8:	1f 92       	push	r1
 2aa:	8f 93       	push	r24
 2ac:	8c 81       	ldd	r24, Y+4	; 0x04
 2ae:	1f 92       	push	r1
 2b0:	8f 93       	push	r24
 2b2:	1f 93       	push	r17
 2b4:	0f 93       	push	r16
 2b6:	0e 94 c4 01 	call	0x388	; 0x388 <printf>
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	f8 94       	cli
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	cd bf       	out	0x3d, r28	; 61
 2c4:	c7 cf       	rjmp	.-114    	; 0x254 <main+0x76>

000002c6 <USART_Init>:
#include <avr/io.h>
#include <stdio.h>

void USART_Init(unsigned int ubrr) {
	/* set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 2c6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 2ca:	80 93 c4 00 	sts	0x00C4, r24

    UCSR0C = _BV(USBS0) | _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data, 2 stop bits */ 
 2ce:	8e e0       	ldi	r24, 0x0E	; 14
 2d0:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */    
 2d4:	88 e1       	ldi	r24, 0x18	; 24
 2d6:	80 93 c1 00 	sts	0x00C1, r24
 2da:	08 95       	ret

000002dc <USART_Transmit>:
}

void USART_Transmit(char c, FILE *stream) {
 2dc:	cf 93       	push	r28
 2de:	c8 2f       	mov	r28, r24
    if (c == '\n') {
 2e0:	8a 30       	cpi	r24, 0x0A	; 10
 2e2:	19 f4       	brne	.+6      	; 0x2ea <USART_Transmit+0xe>
        USART_Transmit('\r', stream); /* transmit carriage return with new line */
 2e4:	8d e0       	ldi	r24, 0x0D	; 13
 2e6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <USART_Transmit>
    }
    /* Wait for empty transmit buffer */
    while ( !( UCSR0A & (1<<UDRE0)) )
 2ea:	e0 ec       	ldi	r30, 0xC0	; 192
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	90 81       	ld	r25, Z
 2f0:	95 ff       	sbrs	r25, 5
 2f2:	fd cf       	rjmp	.-6      	; 0x2ee <USART_Transmit+0x12>
    ;
    /* Put data into buffer, sends the data */
    UDR0 = c;
 2f4:	c0 93 c6 00 	sts	0x00C6, r28
}
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <USART_Receive>:

char USART_Receive(FILE *stream) {
    /* Wait for data to be received */
    while ( !(UCSR0A & (1<<RXC0)) )
 2fc:	e0 ec       	ldi	r30, 0xC0	; 192
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	88 23       	and	r24, r24
 304:	ec f7       	brge	.-6      	; 0x300 <USART_Receive+0x4>
    ;
    /* Get and return received data from buffer */
    return UDR0;
 306:	80 91 c6 00 	lds	r24, 0x00C6
}
 30a:	08 95       	ret

0000030c <fgetc>:
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	ec 01       	movw	r28, r24
 312:	2b 81       	ldd	r18, Y+3	; 0x03
 314:	20 ff       	sbrs	r18, 0
 316:	33 c0       	rjmp	.+102    	; 0x37e <fgetc+0x72>
 318:	26 ff       	sbrs	r18, 6
 31a:	0a c0       	rjmp	.+20     	; 0x330 <fgetc+0x24>
 31c:	2f 7b       	andi	r18, 0xBF	; 191
 31e:	2b 83       	std	Y+3, r18	; 0x03
 320:	8e 81       	ldd	r24, Y+6	; 0x06
 322:	9f 81       	ldd	r25, Y+7	; 0x07
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	9f 83       	std	Y+7, r25	; 0x07
 328:	8e 83       	std	Y+6, r24	; 0x06
 32a:	8a 81       	ldd	r24, Y+2	; 0x02
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	29 c0       	rjmp	.+82     	; 0x382 <fgetc+0x76>
 330:	22 ff       	sbrs	r18, 2
 332:	0f c0       	rjmp	.+30     	; 0x352 <fgetc+0x46>
 334:	e8 81       	ld	r30, Y
 336:	f9 81       	ldd	r31, Y+1	; 0x01
 338:	80 81       	ld	r24, Z
 33a:	99 27       	eor	r25, r25
 33c:	87 fd       	sbrc	r24, 7
 33e:	90 95       	com	r25
 340:	00 97       	sbiw	r24, 0x00	; 0
 342:	19 f4       	brne	.+6      	; 0x34a <fgetc+0x3e>
 344:	20 62       	ori	r18, 0x20	; 32
 346:	2b 83       	std	Y+3, r18	; 0x03
 348:	1a c0       	rjmp	.+52     	; 0x37e <fgetc+0x72>
 34a:	31 96       	adiw	r30, 0x01	; 1
 34c:	f9 83       	std	Y+1, r31	; 0x01
 34e:	e8 83       	st	Y, r30
 350:	0e c0       	rjmp	.+28     	; 0x36e <fgetc+0x62>
 352:	ea 85       	ldd	r30, Y+10	; 0x0a
 354:	fb 85       	ldd	r31, Y+11	; 0x0b
 356:	09 95       	icall
 358:	97 ff       	sbrs	r25, 7
 35a:	09 c0       	rjmp	.+18     	; 0x36e <fgetc+0x62>
 35c:	2b 81       	ldd	r18, Y+3	; 0x03
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	11 f4       	brne	.+4      	; 0x366 <fgetc+0x5a>
 362:	80 e1       	ldi	r24, 0x10	; 16
 364:	01 c0       	rjmp	.+2      	; 0x368 <fgetc+0x5c>
 366:	80 e2       	ldi	r24, 0x20	; 32
 368:	82 2b       	or	r24, r18
 36a:	8b 83       	std	Y+3, r24	; 0x03
 36c:	08 c0       	rjmp	.+16     	; 0x37e <fgetc+0x72>
 36e:	2e 81       	ldd	r18, Y+6	; 0x06
 370:	3f 81       	ldd	r19, Y+7	; 0x07
 372:	2f 5f       	subi	r18, 0xFF	; 255
 374:	3f 4f       	sbci	r19, 0xFF	; 255
 376:	3f 83       	std	Y+7, r19	; 0x07
 378:	2e 83       	std	Y+6, r18	; 0x06
 37a:	99 27       	eor	r25, r25
 37c:	02 c0       	rjmp	.+4      	; 0x382 <fgetc+0x76>
 37e:	8f ef       	ldi	r24, 0xFF	; 255
 380:	9f ef       	ldi	r25, 0xFF	; 255
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <printf>:
 388:	a0 e0       	ldi	r26, 0x00	; 0
 38a:	b0 e0       	ldi	r27, 0x00	; 0
 38c:	ea ec       	ldi	r30, 0xCA	; 202
 38e:	f1 e0       	ldi	r31, 0x01	; 1
 390:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__prologue_saves__+0x20>
 394:	fe 01       	movw	r30, r28
 396:	35 96       	adiw	r30, 0x05	; 5
 398:	61 91       	ld	r22, Z+
 39a:	71 91       	ld	r23, Z+
 39c:	af 01       	movw	r20, r30
 39e:	80 91 5a 01 	lds	r24, 0x015A
 3a2:	90 91 5b 01 	lds	r25, 0x015B
 3a6:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <vfprintf>
 3aa:	e2 e0       	ldi	r30, 0x02	; 2
 3ac:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__epilogue_restores__+0x20>

000003b0 <vfprintf>:
 3b0:	ac e0       	ldi	r26, 0x0C	; 12
 3b2:	b0 e0       	ldi	r27, 0x00	; 0
 3b4:	ee ed       	ldi	r30, 0xDE	; 222
 3b6:	f1 e0       	ldi	r31, 0x01	; 1
 3b8:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__prologue_saves__>
 3bc:	7c 01       	movw	r14, r24
 3be:	6b 01       	movw	r12, r22
 3c0:	8a 01       	movw	r16, r20
 3c2:	fc 01       	movw	r30, r24
 3c4:	17 82       	std	Z+7, r1	; 0x07
 3c6:	16 82       	std	Z+6, r1	; 0x06
 3c8:	83 81       	ldd	r24, Z+3	; 0x03
 3ca:	81 ff       	sbrs	r24, 1
 3cc:	bd c1       	rjmp	.+890    	; 0x748 <vfprintf+0x398>
 3ce:	ce 01       	movw	r24, r28
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	4c 01       	movw	r8, r24
 3d4:	f7 01       	movw	r30, r14
 3d6:	93 81       	ldd	r25, Z+3	; 0x03
 3d8:	f6 01       	movw	r30, r12
 3da:	93 fd       	sbrc	r25, 3
 3dc:	85 91       	lpm	r24, Z+
 3de:	93 ff       	sbrs	r25, 3
 3e0:	81 91       	ld	r24, Z+
 3e2:	6f 01       	movw	r12, r30
 3e4:	88 23       	and	r24, r24
 3e6:	09 f4       	brne	.+2      	; 0x3ea <vfprintf+0x3a>
 3e8:	ab c1       	rjmp	.+854    	; 0x740 <vfprintf+0x390>
 3ea:	85 32       	cpi	r24, 0x25	; 37
 3ec:	39 f4       	brne	.+14     	; 0x3fc <vfprintf+0x4c>
 3ee:	93 fd       	sbrc	r25, 3
 3f0:	85 91       	lpm	r24, Z+
 3f2:	93 ff       	sbrs	r25, 3
 3f4:	81 91       	ld	r24, Z+
 3f6:	6f 01       	movw	r12, r30
 3f8:	85 32       	cpi	r24, 0x25	; 37
 3fa:	29 f4       	brne	.+10     	; 0x406 <vfprintf+0x56>
 3fc:	b7 01       	movw	r22, r14
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 c0 03 	call	0x780	; 0x780 <fputc>
 404:	e7 cf       	rjmp	.-50     	; 0x3d4 <vfprintf+0x24>
 406:	51 2c       	mov	r5, r1
 408:	31 2c       	mov	r3, r1
 40a:	20 e0       	ldi	r18, 0x00	; 0
 40c:	20 32       	cpi	r18, 0x20	; 32
 40e:	a0 f4       	brcc	.+40     	; 0x438 <vfprintf+0x88>
 410:	8b 32       	cpi	r24, 0x2B	; 43
 412:	69 f0       	breq	.+26     	; 0x42e <vfprintf+0x7e>
 414:	30 f4       	brcc	.+12     	; 0x422 <vfprintf+0x72>
 416:	80 32       	cpi	r24, 0x20	; 32
 418:	59 f0       	breq	.+22     	; 0x430 <vfprintf+0x80>
 41a:	83 32       	cpi	r24, 0x23	; 35
 41c:	69 f4       	brne	.+26     	; 0x438 <vfprintf+0x88>
 41e:	20 61       	ori	r18, 0x10	; 16
 420:	2c c0       	rjmp	.+88     	; 0x47a <vfprintf+0xca>
 422:	8d 32       	cpi	r24, 0x2D	; 45
 424:	39 f0       	breq	.+14     	; 0x434 <vfprintf+0x84>
 426:	80 33       	cpi	r24, 0x30	; 48
 428:	39 f4       	brne	.+14     	; 0x438 <vfprintf+0x88>
 42a:	21 60       	ori	r18, 0x01	; 1
 42c:	26 c0       	rjmp	.+76     	; 0x47a <vfprintf+0xca>
 42e:	22 60       	ori	r18, 0x02	; 2
 430:	24 60       	ori	r18, 0x04	; 4
 432:	23 c0       	rjmp	.+70     	; 0x47a <vfprintf+0xca>
 434:	28 60       	ori	r18, 0x08	; 8
 436:	21 c0       	rjmp	.+66     	; 0x47a <vfprintf+0xca>
 438:	27 fd       	sbrc	r18, 7
 43a:	27 c0       	rjmp	.+78     	; 0x48a <vfprintf+0xda>
 43c:	30 ed       	ldi	r19, 0xD0	; 208
 43e:	38 0f       	add	r19, r24
 440:	3a 30       	cpi	r19, 0x0A	; 10
 442:	78 f4       	brcc	.+30     	; 0x462 <vfprintf+0xb2>
 444:	26 ff       	sbrs	r18, 6
 446:	06 c0       	rjmp	.+12     	; 0x454 <vfprintf+0xa4>
 448:	fa e0       	ldi	r31, 0x0A	; 10
 44a:	5f 9e       	mul	r5, r31
 44c:	30 0d       	add	r19, r0
 44e:	11 24       	eor	r1, r1
 450:	53 2e       	mov	r5, r19
 452:	13 c0       	rjmp	.+38     	; 0x47a <vfprintf+0xca>
 454:	8a e0       	ldi	r24, 0x0A	; 10
 456:	38 9e       	mul	r3, r24
 458:	30 0d       	add	r19, r0
 45a:	11 24       	eor	r1, r1
 45c:	33 2e       	mov	r3, r19
 45e:	20 62       	ori	r18, 0x20	; 32
 460:	0c c0       	rjmp	.+24     	; 0x47a <vfprintf+0xca>
 462:	8e 32       	cpi	r24, 0x2E	; 46
 464:	21 f4       	brne	.+8      	; 0x46e <vfprintf+0xbe>
 466:	26 fd       	sbrc	r18, 6
 468:	6b c1       	rjmp	.+726    	; 0x740 <vfprintf+0x390>
 46a:	20 64       	ori	r18, 0x40	; 64
 46c:	06 c0       	rjmp	.+12     	; 0x47a <vfprintf+0xca>
 46e:	8c 36       	cpi	r24, 0x6C	; 108
 470:	11 f4       	brne	.+4      	; 0x476 <vfprintf+0xc6>
 472:	20 68       	ori	r18, 0x80	; 128
 474:	02 c0       	rjmp	.+4      	; 0x47a <vfprintf+0xca>
 476:	88 36       	cpi	r24, 0x68	; 104
 478:	41 f4       	brne	.+16     	; 0x48a <vfprintf+0xda>
 47a:	f6 01       	movw	r30, r12
 47c:	93 fd       	sbrc	r25, 3
 47e:	85 91       	lpm	r24, Z+
 480:	93 ff       	sbrs	r25, 3
 482:	81 91       	ld	r24, Z+
 484:	6f 01       	movw	r12, r30
 486:	81 11       	cpse	r24, r1
 488:	c1 cf       	rjmp	.-126    	; 0x40c <vfprintf+0x5c>
 48a:	98 2f       	mov	r25, r24
 48c:	9f 7d       	andi	r25, 0xDF	; 223
 48e:	95 54       	subi	r25, 0x45	; 69
 490:	93 30       	cpi	r25, 0x03	; 3
 492:	28 f4       	brcc	.+10     	; 0x49e <vfprintf+0xee>
 494:	0c 5f       	subi	r16, 0xFC	; 252
 496:	1f 4f       	sbci	r17, 0xFF	; 255
 498:	ff e3       	ldi	r31, 0x3F	; 63
 49a:	f9 83       	std	Y+1, r31	; 0x01
 49c:	0d c0       	rjmp	.+26     	; 0x4b8 <vfprintf+0x108>
 49e:	83 36       	cpi	r24, 0x63	; 99
 4a0:	31 f0       	breq	.+12     	; 0x4ae <vfprintf+0xfe>
 4a2:	83 37       	cpi	r24, 0x73	; 115
 4a4:	71 f0       	breq	.+28     	; 0x4c2 <vfprintf+0x112>
 4a6:	83 35       	cpi	r24, 0x53	; 83
 4a8:	09 f0       	breq	.+2      	; 0x4ac <vfprintf+0xfc>
 4aa:	5b c0       	rjmp	.+182    	; 0x562 <vfprintf+0x1b2>
 4ac:	22 c0       	rjmp	.+68     	; 0x4f2 <vfprintf+0x142>
 4ae:	f8 01       	movw	r30, r16
 4b0:	80 81       	ld	r24, Z
 4b2:	89 83       	std	Y+1, r24	; 0x01
 4b4:	0e 5f       	subi	r16, 0xFE	; 254
 4b6:	1f 4f       	sbci	r17, 0xFF	; 255
 4b8:	44 24       	eor	r4, r4
 4ba:	43 94       	inc	r4
 4bc:	51 2c       	mov	r5, r1
 4be:	54 01       	movw	r10, r8
 4c0:	15 c0       	rjmp	.+42     	; 0x4ec <vfprintf+0x13c>
 4c2:	38 01       	movw	r6, r16
 4c4:	f2 e0       	ldi	r31, 0x02	; 2
 4c6:	6f 0e       	add	r6, r31
 4c8:	71 1c       	adc	r7, r1
 4ca:	f8 01       	movw	r30, r16
 4cc:	a0 80       	ld	r10, Z
 4ce:	b1 80       	ldd	r11, Z+1	; 0x01
 4d0:	26 ff       	sbrs	r18, 6
 4d2:	03 c0       	rjmp	.+6      	; 0x4da <vfprintf+0x12a>
 4d4:	65 2d       	mov	r22, r5
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <vfprintf+0x12e>
 4da:	6f ef       	ldi	r22, 0xFF	; 255
 4dc:	7f ef       	ldi	r23, 0xFF	; 255
 4de:	c5 01       	movw	r24, r10
 4e0:	2c 87       	std	Y+12, r18	; 0x0c
 4e2:	0e 94 b5 03 	call	0x76a	; 0x76a <strnlen>
 4e6:	2c 01       	movw	r4, r24
 4e8:	83 01       	movw	r16, r6
 4ea:	2c 85       	ldd	r18, Y+12	; 0x0c
 4ec:	2f 77       	andi	r18, 0x7F	; 127
 4ee:	22 2e       	mov	r2, r18
 4f0:	17 c0       	rjmp	.+46     	; 0x520 <vfprintf+0x170>
 4f2:	38 01       	movw	r6, r16
 4f4:	f2 e0       	ldi	r31, 0x02	; 2
 4f6:	6f 0e       	add	r6, r31
 4f8:	71 1c       	adc	r7, r1
 4fa:	f8 01       	movw	r30, r16
 4fc:	a0 80       	ld	r10, Z
 4fe:	b1 80       	ldd	r11, Z+1	; 0x01
 500:	26 ff       	sbrs	r18, 6
 502:	03 c0       	rjmp	.+6      	; 0x50a <vfprintf+0x15a>
 504:	65 2d       	mov	r22, r5
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	02 c0       	rjmp	.+4      	; 0x50e <vfprintf+0x15e>
 50a:	6f ef       	ldi	r22, 0xFF	; 255
 50c:	7f ef       	ldi	r23, 0xFF	; 255
 50e:	c5 01       	movw	r24, r10
 510:	2c 87       	std	Y+12, r18	; 0x0c
 512:	0e 94 aa 03 	call	0x754	; 0x754 <strnlen_P>
 516:	2c 01       	movw	r4, r24
 518:	2c 85       	ldd	r18, Y+12	; 0x0c
 51a:	20 68       	ori	r18, 0x80	; 128
 51c:	22 2e       	mov	r2, r18
 51e:	83 01       	movw	r16, r6
 520:	23 fc       	sbrc	r2, 3
 522:	1b c0       	rjmp	.+54     	; 0x55a <vfprintf+0x1aa>
 524:	83 2d       	mov	r24, r3
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	48 16       	cp	r4, r24
 52a:	59 06       	cpc	r5, r25
 52c:	b0 f4       	brcc	.+44     	; 0x55a <vfprintf+0x1aa>
 52e:	b7 01       	movw	r22, r14
 530:	80 e2       	ldi	r24, 0x20	; 32
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 c0 03 	call	0x780	; 0x780 <fputc>
 538:	3a 94       	dec	r3
 53a:	f4 cf       	rjmp	.-24     	; 0x524 <vfprintf+0x174>
 53c:	f5 01       	movw	r30, r10
 53e:	27 fc       	sbrc	r2, 7
 540:	85 91       	lpm	r24, Z+
 542:	27 fe       	sbrs	r2, 7
 544:	81 91       	ld	r24, Z+
 546:	5f 01       	movw	r10, r30
 548:	b7 01       	movw	r22, r14
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 c0 03 	call	0x780	; 0x780 <fputc>
 550:	31 10       	cpse	r3, r1
 552:	3a 94       	dec	r3
 554:	f1 e0       	ldi	r31, 0x01	; 1
 556:	4f 1a       	sub	r4, r31
 558:	51 08       	sbc	r5, r1
 55a:	41 14       	cp	r4, r1
 55c:	51 04       	cpc	r5, r1
 55e:	71 f7       	brne	.-36     	; 0x53c <vfprintf+0x18c>
 560:	e5 c0       	rjmp	.+458    	; 0x72c <vfprintf+0x37c>
 562:	84 36       	cpi	r24, 0x64	; 100
 564:	11 f0       	breq	.+4      	; 0x56a <vfprintf+0x1ba>
 566:	89 36       	cpi	r24, 0x69	; 105
 568:	39 f5       	brne	.+78     	; 0x5b8 <vfprintf+0x208>
 56a:	f8 01       	movw	r30, r16
 56c:	27 ff       	sbrs	r18, 7
 56e:	07 c0       	rjmp	.+14     	; 0x57e <vfprintf+0x1ce>
 570:	60 81       	ld	r22, Z
 572:	71 81       	ldd	r23, Z+1	; 0x01
 574:	82 81       	ldd	r24, Z+2	; 0x02
 576:	93 81       	ldd	r25, Z+3	; 0x03
 578:	0c 5f       	subi	r16, 0xFC	; 252
 57a:	1f 4f       	sbci	r17, 0xFF	; 255
 57c:	08 c0       	rjmp	.+16     	; 0x58e <vfprintf+0x1de>
 57e:	60 81       	ld	r22, Z
 580:	71 81       	ldd	r23, Z+1	; 0x01
 582:	88 27       	eor	r24, r24
 584:	77 fd       	sbrc	r23, 7
 586:	80 95       	com	r24
 588:	98 2f       	mov	r25, r24
 58a:	0e 5f       	subi	r16, 0xFE	; 254
 58c:	1f 4f       	sbci	r17, 0xFF	; 255
 58e:	2f 76       	andi	r18, 0x6F	; 111
 590:	b2 2e       	mov	r11, r18
 592:	97 ff       	sbrs	r25, 7
 594:	09 c0       	rjmp	.+18     	; 0x5a8 <vfprintf+0x1f8>
 596:	90 95       	com	r25
 598:	80 95       	com	r24
 59a:	70 95       	com	r23
 59c:	61 95       	neg	r22
 59e:	7f 4f       	sbci	r23, 0xFF	; 255
 5a0:	8f 4f       	sbci	r24, 0xFF	; 255
 5a2:	9f 4f       	sbci	r25, 0xFF	; 255
 5a4:	20 68       	ori	r18, 0x80	; 128
 5a6:	b2 2e       	mov	r11, r18
 5a8:	2a e0       	ldi	r18, 0x0A	; 10
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	a4 01       	movw	r20, r8
 5ae:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__ultoa_invert>
 5b2:	a8 2e       	mov	r10, r24
 5b4:	a8 18       	sub	r10, r8
 5b6:	44 c0       	rjmp	.+136    	; 0x640 <vfprintf+0x290>
 5b8:	85 37       	cpi	r24, 0x75	; 117
 5ba:	29 f4       	brne	.+10     	; 0x5c6 <vfprintf+0x216>
 5bc:	2f 7e       	andi	r18, 0xEF	; 239
 5be:	b2 2e       	mov	r11, r18
 5c0:	2a e0       	ldi	r18, 0x0A	; 10
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	25 c0       	rjmp	.+74     	; 0x610 <vfprintf+0x260>
 5c6:	f2 2f       	mov	r31, r18
 5c8:	f9 7f       	andi	r31, 0xF9	; 249
 5ca:	bf 2e       	mov	r11, r31
 5cc:	8f 36       	cpi	r24, 0x6F	; 111
 5ce:	c1 f0       	breq	.+48     	; 0x600 <vfprintf+0x250>
 5d0:	18 f4       	brcc	.+6      	; 0x5d8 <vfprintf+0x228>
 5d2:	88 35       	cpi	r24, 0x58	; 88
 5d4:	79 f0       	breq	.+30     	; 0x5f4 <vfprintf+0x244>
 5d6:	b4 c0       	rjmp	.+360    	; 0x740 <vfprintf+0x390>
 5d8:	80 37       	cpi	r24, 0x70	; 112
 5da:	19 f0       	breq	.+6      	; 0x5e2 <vfprintf+0x232>
 5dc:	88 37       	cpi	r24, 0x78	; 120
 5de:	21 f0       	breq	.+8      	; 0x5e8 <vfprintf+0x238>
 5e0:	af c0       	rjmp	.+350    	; 0x740 <vfprintf+0x390>
 5e2:	2f 2f       	mov	r18, r31
 5e4:	20 61       	ori	r18, 0x10	; 16
 5e6:	b2 2e       	mov	r11, r18
 5e8:	b4 fe       	sbrs	r11, 4
 5ea:	0d c0       	rjmp	.+26     	; 0x606 <vfprintf+0x256>
 5ec:	8b 2d       	mov	r24, r11
 5ee:	84 60       	ori	r24, 0x04	; 4
 5f0:	b8 2e       	mov	r11, r24
 5f2:	09 c0       	rjmp	.+18     	; 0x606 <vfprintf+0x256>
 5f4:	24 ff       	sbrs	r18, 4
 5f6:	0a c0       	rjmp	.+20     	; 0x60c <vfprintf+0x25c>
 5f8:	9f 2f       	mov	r25, r31
 5fa:	96 60       	ori	r25, 0x06	; 6
 5fc:	b9 2e       	mov	r11, r25
 5fe:	06 c0       	rjmp	.+12     	; 0x60c <vfprintf+0x25c>
 600:	28 e0       	ldi	r18, 0x08	; 8
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	05 c0       	rjmp	.+10     	; 0x610 <vfprintf+0x260>
 606:	20 e1       	ldi	r18, 0x10	; 16
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	02 c0       	rjmp	.+4      	; 0x610 <vfprintf+0x260>
 60c:	20 e1       	ldi	r18, 0x10	; 16
 60e:	32 e0       	ldi	r19, 0x02	; 2
 610:	f8 01       	movw	r30, r16
 612:	b7 fe       	sbrs	r11, 7
 614:	07 c0       	rjmp	.+14     	; 0x624 <vfprintf+0x274>
 616:	60 81       	ld	r22, Z
 618:	71 81       	ldd	r23, Z+1	; 0x01
 61a:	82 81       	ldd	r24, Z+2	; 0x02
 61c:	93 81       	ldd	r25, Z+3	; 0x03
 61e:	0c 5f       	subi	r16, 0xFC	; 252
 620:	1f 4f       	sbci	r17, 0xFF	; 255
 622:	06 c0       	rjmp	.+12     	; 0x630 <vfprintf+0x280>
 624:	60 81       	ld	r22, Z
 626:	71 81       	ldd	r23, Z+1	; 0x01
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 5f       	subi	r16, 0xFE	; 254
 62e:	1f 4f       	sbci	r17, 0xFF	; 255
 630:	a4 01       	movw	r20, r8
 632:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__ultoa_invert>
 636:	a8 2e       	mov	r10, r24
 638:	a8 18       	sub	r10, r8
 63a:	fb 2d       	mov	r31, r11
 63c:	ff 77       	andi	r31, 0x7F	; 127
 63e:	bf 2e       	mov	r11, r31
 640:	b6 fe       	sbrs	r11, 6
 642:	0b c0       	rjmp	.+22     	; 0x65a <vfprintf+0x2aa>
 644:	2b 2d       	mov	r18, r11
 646:	2e 7f       	andi	r18, 0xFE	; 254
 648:	a5 14       	cp	r10, r5
 64a:	50 f4       	brcc	.+20     	; 0x660 <vfprintf+0x2b0>
 64c:	b4 fe       	sbrs	r11, 4
 64e:	0a c0       	rjmp	.+20     	; 0x664 <vfprintf+0x2b4>
 650:	b2 fc       	sbrc	r11, 2
 652:	08 c0       	rjmp	.+16     	; 0x664 <vfprintf+0x2b4>
 654:	2b 2d       	mov	r18, r11
 656:	2e 7e       	andi	r18, 0xEE	; 238
 658:	05 c0       	rjmp	.+10     	; 0x664 <vfprintf+0x2b4>
 65a:	7a 2c       	mov	r7, r10
 65c:	2b 2d       	mov	r18, r11
 65e:	03 c0       	rjmp	.+6      	; 0x666 <vfprintf+0x2b6>
 660:	7a 2c       	mov	r7, r10
 662:	01 c0       	rjmp	.+2      	; 0x666 <vfprintf+0x2b6>
 664:	75 2c       	mov	r7, r5
 666:	24 ff       	sbrs	r18, 4
 668:	0d c0       	rjmp	.+26     	; 0x684 <vfprintf+0x2d4>
 66a:	fe 01       	movw	r30, r28
 66c:	ea 0d       	add	r30, r10
 66e:	f1 1d       	adc	r31, r1
 670:	80 81       	ld	r24, Z
 672:	80 33       	cpi	r24, 0x30	; 48
 674:	11 f4       	brne	.+4      	; 0x67a <vfprintf+0x2ca>
 676:	29 7e       	andi	r18, 0xE9	; 233
 678:	09 c0       	rjmp	.+18     	; 0x68c <vfprintf+0x2dc>
 67a:	22 ff       	sbrs	r18, 2
 67c:	06 c0       	rjmp	.+12     	; 0x68a <vfprintf+0x2da>
 67e:	73 94       	inc	r7
 680:	73 94       	inc	r7
 682:	04 c0       	rjmp	.+8      	; 0x68c <vfprintf+0x2dc>
 684:	82 2f       	mov	r24, r18
 686:	86 78       	andi	r24, 0x86	; 134
 688:	09 f0       	breq	.+2      	; 0x68c <vfprintf+0x2dc>
 68a:	73 94       	inc	r7
 68c:	23 fd       	sbrc	r18, 3
 68e:	13 c0       	rjmp	.+38     	; 0x6b6 <vfprintf+0x306>
 690:	20 ff       	sbrs	r18, 0
 692:	06 c0       	rjmp	.+12     	; 0x6a0 <vfprintf+0x2f0>
 694:	5a 2c       	mov	r5, r10
 696:	73 14       	cp	r7, r3
 698:	18 f4       	brcc	.+6      	; 0x6a0 <vfprintf+0x2f0>
 69a:	53 0c       	add	r5, r3
 69c:	57 18       	sub	r5, r7
 69e:	73 2c       	mov	r7, r3
 6a0:	73 14       	cp	r7, r3
 6a2:	68 f4       	brcc	.+26     	; 0x6be <vfprintf+0x30e>
 6a4:	b7 01       	movw	r22, r14
 6a6:	80 e2       	ldi	r24, 0x20	; 32
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	2c 87       	std	Y+12, r18	; 0x0c
 6ac:	0e 94 c0 03 	call	0x780	; 0x780 <fputc>
 6b0:	73 94       	inc	r7
 6b2:	2c 85       	ldd	r18, Y+12	; 0x0c
 6b4:	f5 cf       	rjmp	.-22     	; 0x6a0 <vfprintf+0x2f0>
 6b6:	73 14       	cp	r7, r3
 6b8:	10 f4       	brcc	.+4      	; 0x6be <vfprintf+0x30e>
 6ba:	37 18       	sub	r3, r7
 6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <vfprintf+0x310>
 6be:	31 2c       	mov	r3, r1
 6c0:	24 ff       	sbrs	r18, 4
 6c2:	12 c0       	rjmp	.+36     	; 0x6e8 <vfprintf+0x338>
 6c4:	b7 01       	movw	r22, r14
 6c6:	80 e3       	ldi	r24, 0x30	; 48
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	2c 87       	std	Y+12, r18	; 0x0c
 6cc:	0e 94 c0 03 	call	0x780	; 0x780 <fputc>
 6d0:	2c 85       	ldd	r18, Y+12	; 0x0c
 6d2:	22 ff       	sbrs	r18, 2
 6d4:	17 c0       	rjmp	.+46     	; 0x704 <vfprintf+0x354>
 6d6:	21 ff       	sbrs	r18, 1
 6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <vfprintf+0x330>
 6da:	88 e5       	ldi	r24, 0x58	; 88
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <vfprintf+0x334>
 6e0:	88 e7       	ldi	r24, 0x78	; 120
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	b7 01       	movw	r22, r14
 6e6:	0c c0       	rjmp	.+24     	; 0x700 <vfprintf+0x350>
 6e8:	82 2f       	mov	r24, r18
 6ea:	86 78       	andi	r24, 0x86	; 134
 6ec:	59 f0       	breq	.+22     	; 0x704 <vfprintf+0x354>
 6ee:	21 fd       	sbrc	r18, 1
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <vfprintf+0x346>
 6f2:	80 e2       	ldi	r24, 0x20	; 32
 6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <vfprintf+0x348>
 6f6:	8b e2       	ldi	r24, 0x2B	; 43
 6f8:	27 fd       	sbrc	r18, 7
 6fa:	8d e2       	ldi	r24, 0x2D	; 45
 6fc:	b7 01       	movw	r22, r14
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 c0 03 	call	0x780	; 0x780 <fputc>
 704:	a5 14       	cp	r10, r5
 706:	38 f4       	brcc	.+14     	; 0x716 <vfprintf+0x366>
 708:	b7 01       	movw	r22, r14
 70a:	80 e3       	ldi	r24, 0x30	; 48
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 c0 03 	call	0x780	; 0x780 <fputc>
 712:	5a 94       	dec	r5
 714:	f7 cf       	rjmp	.-18     	; 0x704 <vfprintf+0x354>
 716:	aa 94       	dec	r10
 718:	f4 01       	movw	r30, r8
 71a:	ea 0d       	add	r30, r10
 71c:	f1 1d       	adc	r31, r1
 71e:	80 81       	ld	r24, Z
 720:	b7 01       	movw	r22, r14
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 94 c0 03 	call	0x780	; 0x780 <fputc>
 728:	a1 10       	cpse	r10, r1
 72a:	f5 cf       	rjmp	.-22     	; 0x716 <vfprintf+0x366>
 72c:	33 20       	and	r3, r3
 72e:	09 f4       	brne	.+2      	; 0x732 <vfprintf+0x382>
 730:	51 ce       	rjmp	.-862    	; 0x3d4 <vfprintf+0x24>
 732:	b7 01       	movw	r22, r14
 734:	80 e2       	ldi	r24, 0x20	; 32
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	0e 94 c0 03 	call	0x780	; 0x780 <fputc>
 73c:	3a 94       	dec	r3
 73e:	f6 cf       	rjmp	.-20     	; 0x72c <vfprintf+0x37c>
 740:	f7 01       	movw	r30, r14
 742:	86 81       	ldd	r24, Z+6	; 0x06
 744:	97 81       	ldd	r25, Z+7	; 0x07
 746:	02 c0       	rjmp	.+4      	; 0x74c <vfprintf+0x39c>
 748:	8f ef       	ldi	r24, 0xFF	; 255
 74a:	9f ef       	ldi	r25, 0xFF	; 255
 74c:	2c 96       	adiw	r28, 0x0c	; 12
 74e:	e2 e1       	ldi	r30, 0x12	; 18
 750:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__epilogue_restores__>

00000754 <strnlen_P>:
 754:	fc 01       	movw	r30, r24
 756:	05 90       	lpm	r0, Z+
 758:	61 50       	subi	r22, 0x01	; 1
 75a:	70 40       	sbci	r23, 0x00	; 0
 75c:	01 10       	cpse	r0, r1
 75e:	d8 f7       	brcc	.-10     	; 0x756 <strnlen_P+0x2>
 760:	80 95       	com	r24
 762:	90 95       	com	r25
 764:	8e 0f       	add	r24, r30
 766:	9f 1f       	adc	r25, r31
 768:	08 95       	ret

0000076a <strnlen>:
 76a:	fc 01       	movw	r30, r24
 76c:	61 50       	subi	r22, 0x01	; 1
 76e:	70 40       	sbci	r23, 0x00	; 0
 770:	01 90       	ld	r0, Z+
 772:	01 10       	cpse	r0, r1
 774:	d8 f7       	brcc	.-10     	; 0x76c <strnlen+0x2>
 776:	80 95       	com	r24
 778:	90 95       	com	r25
 77a:	8e 0f       	add	r24, r30
 77c:	9f 1f       	adc	r25, r31
 77e:	08 95       	ret

00000780 <fputc>:
 780:	0f 93       	push	r16
 782:	1f 93       	push	r17
 784:	cf 93       	push	r28
 786:	df 93       	push	r29
 788:	18 2f       	mov	r17, r24
 78a:	09 2f       	mov	r16, r25
 78c:	eb 01       	movw	r28, r22
 78e:	8b 81       	ldd	r24, Y+3	; 0x03
 790:	81 fd       	sbrc	r24, 1
 792:	03 c0       	rjmp	.+6      	; 0x79a <fputc+0x1a>
 794:	8f ef       	ldi	r24, 0xFF	; 255
 796:	9f ef       	ldi	r25, 0xFF	; 255
 798:	20 c0       	rjmp	.+64     	; 0x7da <fputc+0x5a>
 79a:	82 ff       	sbrs	r24, 2
 79c:	10 c0       	rjmp	.+32     	; 0x7be <fputc+0x3e>
 79e:	4e 81       	ldd	r20, Y+6	; 0x06
 7a0:	5f 81       	ldd	r21, Y+7	; 0x07
 7a2:	2c 81       	ldd	r18, Y+4	; 0x04
 7a4:	3d 81       	ldd	r19, Y+5	; 0x05
 7a6:	42 17       	cp	r20, r18
 7a8:	53 07       	cpc	r21, r19
 7aa:	7c f4       	brge	.+30     	; 0x7ca <fputc+0x4a>
 7ac:	e8 81       	ld	r30, Y
 7ae:	f9 81       	ldd	r31, Y+1	; 0x01
 7b0:	9f 01       	movw	r18, r30
 7b2:	2f 5f       	subi	r18, 0xFF	; 255
 7b4:	3f 4f       	sbci	r19, 0xFF	; 255
 7b6:	39 83       	std	Y+1, r19	; 0x01
 7b8:	28 83       	st	Y, r18
 7ba:	10 83       	st	Z, r17
 7bc:	06 c0       	rjmp	.+12     	; 0x7ca <fputc+0x4a>
 7be:	e8 85       	ldd	r30, Y+8	; 0x08
 7c0:	f9 85       	ldd	r31, Y+9	; 0x09
 7c2:	81 2f       	mov	r24, r17
 7c4:	09 95       	icall
 7c6:	89 2b       	or	r24, r25
 7c8:	29 f7       	brne	.-54     	; 0x794 <fputc+0x14>
 7ca:	2e 81       	ldd	r18, Y+6	; 0x06
 7cc:	3f 81       	ldd	r19, Y+7	; 0x07
 7ce:	2f 5f       	subi	r18, 0xFF	; 255
 7d0:	3f 4f       	sbci	r19, 0xFF	; 255
 7d2:	3f 83       	std	Y+7, r19	; 0x07
 7d4:	2e 83       	std	Y+6, r18	; 0x06
 7d6:	81 2f       	mov	r24, r17
 7d8:	90 2f       	mov	r25, r16
 7da:	df 91       	pop	r29
 7dc:	cf 91       	pop	r28
 7de:	1f 91       	pop	r17
 7e0:	0f 91       	pop	r16
 7e2:	08 95       	ret

000007e4 <__ultoa_invert>:
 7e4:	fa 01       	movw	r30, r20
 7e6:	aa 27       	eor	r26, r26
 7e8:	28 30       	cpi	r18, 0x08	; 8
 7ea:	51 f1       	breq	.+84     	; 0x840 <__ultoa_invert+0x5c>
 7ec:	20 31       	cpi	r18, 0x10	; 16
 7ee:	81 f1       	breq	.+96     	; 0x850 <__ultoa_invert+0x6c>
 7f0:	e8 94       	clt
 7f2:	6f 93       	push	r22
 7f4:	6e 7f       	andi	r22, 0xFE	; 254
 7f6:	6e 5f       	subi	r22, 0xFE	; 254
 7f8:	7f 4f       	sbci	r23, 0xFF	; 255
 7fa:	8f 4f       	sbci	r24, 0xFF	; 255
 7fc:	9f 4f       	sbci	r25, 0xFF	; 255
 7fe:	af 4f       	sbci	r26, 0xFF	; 255
 800:	b1 e0       	ldi	r27, 0x01	; 1
 802:	3e d0       	rcall	.+124    	; 0x880 <__ultoa_invert+0x9c>
 804:	b4 e0       	ldi	r27, 0x04	; 4
 806:	3c d0       	rcall	.+120    	; 0x880 <__ultoa_invert+0x9c>
 808:	67 0f       	add	r22, r23
 80a:	78 1f       	adc	r23, r24
 80c:	89 1f       	adc	r24, r25
 80e:	9a 1f       	adc	r25, r26
 810:	a1 1d       	adc	r26, r1
 812:	68 0f       	add	r22, r24
 814:	79 1f       	adc	r23, r25
 816:	8a 1f       	adc	r24, r26
 818:	91 1d       	adc	r25, r1
 81a:	a1 1d       	adc	r26, r1
 81c:	6a 0f       	add	r22, r26
 81e:	71 1d       	adc	r23, r1
 820:	81 1d       	adc	r24, r1
 822:	91 1d       	adc	r25, r1
 824:	a1 1d       	adc	r26, r1
 826:	20 d0       	rcall	.+64     	; 0x868 <__ultoa_invert+0x84>
 828:	09 f4       	brne	.+2      	; 0x82c <__ultoa_invert+0x48>
 82a:	68 94       	set
 82c:	3f 91       	pop	r19
 82e:	2a e0       	ldi	r18, 0x0A	; 10
 830:	26 9f       	mul	r18, r22
 832:	11 24       	eor	r1, r1
 834:	30 19       	sub	r19, r0
 836:	30 5d       	subi	r19, 0xD0	; 208
 838:	31 93       	st	Z+, r19
 83a:	de f6       	brtc	.-74     	; 0x7f2 <__ultoa_invert+0xe>
 83c:	cf 01       	movw	r24, r30
 83e:	08 95       	ret
 840:	46 2f       	mov	r20, r22
 842:	47 70       	andi	r20, 0x07	; 7
 844:	40 5d       	subi	r20, 0xD0	; 208
 846:	41 93       	st	Z+, r20
 848:	b3 e0       	ldi	r27, 0x03	; 3
 84a:	0f d0       	rcall	.+30     	; 0x86a <__ultoa_invert+0x86>
 84c:	c9 f7       	brne	.-14     	; 0x840 <__ultoa_invert+0x5c>
 84e:	f6 cf       	rjmp	.-20     	; 0x83c <__ultoa_invert+0x58>
 850:	46 2f       	mov	r20, r22
 852:	4f 70       	andi	r20, 0x0F	; 15
 854:	40 5d       	subi	r20, 0xD0	; 208
 856:	4a 33       	cpi	r20, 0x3A	; 58
 858:	18 f0       	brcs	.+6      	; 0x860 <__ultoa_invert+0x7c>
 85a:	49 5d       	subi	r20, 0xD9	; 217
 85c:	31 fd       	sbrc	r19, 1
 85e:	40 52       	subi	r20, 0x20	; 32
 860:	41 93       	st	Z+, r20
 862:	02 d0       	rcall	.+4      	; 0x868 <__ultoa_invert+0x84>
 864:	a9 f7       	brne	.-22     	; 0x850 <__ultoa_invert+0x6c>
 866:	ea cf       	rjmp	.-44     	; 0x83c <__ultoa_invert+0x58>
 868:	b4 e0       	ldi	r27, 0x04	; 4
 86a:	a6 95       	lsr	r26
 86c:	97 95       	ror	r25
 86e:	87 95       	ror	r24
 870:	77 95       	ror	r23
 872:	67 95       	ror	r22
 874:	ba 95       	dec	r27
 876:	c9 f7       	brne	.-14     	; 0x86a <__ultoa_invert+0x86>
 878:	00 97       	sbiw	r24, 0x00	; 0
 87a:	61 05       	cpc	r22, r1
 87c:	71 05       	cpc	r23, r1
 87e:	08 95       	ret
 880:	9b 01       	movw	r18, r22
 882:	ac 01       	movw	r20, r24
 884:	0a 2e       	mov	r0, r26
 886:	06 94       	lsr	r0
 888:	57 95       	ror	r21
 88a:	47 95       	ror	r20
 88c:	37 95       	ror	r19
 88e:	27 95       	ror	r18
 890:	ba 95       	dec	r27
 892:	c9 f7       	brne	.-14     	; 0x886 <__ultoa_invert+0xa2>
 894:	62 0f       	add	r22, r18
 896:	73 1f       	adc	r23, r19
 898:	84 1f       	adc	r24, r20
 89a:	95 1f       	adc	r25, r21
 89c:	a0 1d       	adc	r26, r0
 89e:	08 95       	ret

000008a0 <__prologue_saves__>:
 8a0:	2f 92       	push	r2
 8a2:	3f 92       	push	r3
 8a4:	4f 92       	push	r4
 8a6:	5f 92       	push	r5
 8a8:	6f 92       	push	r6
 8aa:	7f 92       	push	r7
 8ac:	8f 92       	push	r8
 8ae:	9f 92       	push	r9
 8b0:	af 92       	push	r10
 8b2:	bf 92       	push	r11
 8b4:	cf 92       	push	r12
 8b6:	df 92       	push	r13
 8b8:	ef 92       	push	r14
 8ba:	ff 92       	push	r15
 8bc:	0f 93       	push	r16
 8be:	1f 93       	push	r17
 8c0:	cf 93       	push	r28
 8c2:	df 93       	push	r29
 8c4:	cd b7       	in	r28, 0x3d	; 61
 8c6:	de b7       	in	r29, 0x3e	; 62
 8c8:	ca 1b       	sub	r28, r26
 8ca:	db 0b       	sbc	r29, r27
 8cc:	0f b6       	in	r0, 0x3f	; 63
 8ce:	f8 94       	cli
 8d0:	de bf       	out	0x3e, r29	; 62
 8d2:	0f be       	out	0x3f, r0	; 63
 8d4:	cd bf       	out	0x3d, r28	; 61
 8d6:	09 94       	ijmp

000008d8 <__epilogue_restores__>:
 8d8:	2a 88       	ldd	r2, Y+18	; 0x12
 8da:	39 88       	ldd	r3, Y+17	; 0x11
 8dc:	48 88       	ldd	r4, Y+16	; 0x10
 8de:	5f 84       	ldd	r5, Y+15	; 0x0f
 8e0:	6e 84       	ldd	r6, Y+14	; 0x0e
 8e2:	7d 84       	ldd	r7, Y+13	; 0x0d
 8e4:	8c 84       	ldd	r8, Y+12	; 0x0c
 8e6:	9b 84       	ldd	r9, Y+11	; 0x0b
 8e8:	aa 84       	ldd	r10, Y+10	; 0x0a
 8ea:	b9 84       	ldd	r11, Y+9	; 0x09
 8ec:	c8 84       	ldd	r12, Y+8	; 0x08
 8ee:	df 80       	ldd	r13, Y+7	; 0x07
 8f0:	ee 80       	ldd	r14, Y+6	; 0x06
 8f2:	fd 80       	ldd	r15, Y+5	; 0x05
 8f4:	0c 81       	ldd	r16, Y+4	; 0x04
 8f6:	1b 81       	ldd	r17, Y+3	; 0x03
 8f8:	aa 81       	ldd	r26, Y+2	; 0x02
 8fa:	b9 81       	ldd	r27, Y+1	; 0x01
 8fc:	ce 0f       	add	r28, r30
 8fe:	d1 1d       	adc	r29, r1
 900:	0f b6       	in	r0, 0x3f	; 63
 902:	f8 94       	cli
 904:	de bf       	out	0x3e, r29	; 62
 906:	0f be       	out	0x3f, r0	; 63
 908:	cd bf       	out	0x3d, r28	; 61
 90a:	ed 01       	movw	r28, r26
 90c:	08 95       	ret

0000090e <_exit>:
 90e:	f8 94       	cli

00000910 <__stop_program>:
 910:	ff cf       	rjmp	.-2      	; 0x910 <__stop_program>
